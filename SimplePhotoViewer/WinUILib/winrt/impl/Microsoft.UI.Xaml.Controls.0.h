// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Contacts {

struct Contact;

}

WINRT_EXPORT namespace winrt::Windows::ApplicationModel::DataTransfer {

enum class DataPackageOperation : unsigned;
struct DataPackage;

}

WINRT_EXPORT namespace winrt::Windows::Foundation {

struct Deferral;
struct Uri;

}

WINRT_EXPORT namespace winrt::Windows::UI {

struct Color;

}

WINRT_EXPORT namespace winrt::Windows::UI::Text {

enum class FontStyle;
struct FontWeight;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml {

enum class Visibility;
struct DataTemplate;
struct DependencyObject;
struct DependencyProperty;
struct Style;
struct Thickness;
struct UIElement;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Automation {

enum class ExpandCollapseState;
enum class ToggleState;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls {

enum class Symbol;
struct AutoSuggestBox;
struct DataTemplateSelector;
struct ICommandBarElement;
struct IconElement;
struct MenuFlyoutItemBase;
struct StyleSelector;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls::Primitives {

struct FlyoutBase;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Input {

struct ICommand;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media {

struct Brush;
struct FontFamily;
struct Geometry;
struct ImageSource;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Animation {

struct NavigationTransitionInfo;
struct TransitionCollection;

}

WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls {

enum class ColorPickerHsvChannel : int32_t
{
    Hue = 0,
    Saturation = 1,
    Value = 2,
    Alpha = 3,
};

enum class ColorSpectrumComponents : int32_t
{
    HueValue = 0,
    ValueHue = 1,
    HueSaturation = 2,
    SaturationHue = 3,
    SaturationValue = 4,
    ValueSaturation = 5,
};

enum class ColorSpectrumShape : int32_t
{
    Box = 0,
    Ring = 1,
};

enum class NavigationViewBackButtonVisible : int32_t
{
    Collapsed = 0,
    Visible = 1,
    Auto = 2,
};

enum class NavigationViewDisplayMode : int32_t
{
    Minimal = 0,
    Compact = 1,
    Expanded = 2,
};

enum class NavigationViewOverflowLabelMode : int32_t
{
    MoreLabel = 0,
    NoLabel = 1,
};

enum class NavigationViewPaneDisplayMode : int32_t
{
    Auto = 0,
    Left = 1,
    Top = 2,
    LeftCompact = 3,
    LeftMinimal = 4,
};

enum class NavigationViewSelectionFollowsFocus : int32_t
{
    Disabled = 0,
    Enabled = 1,
};

enum class NavigationViewShoulderNavigationEnabled : int32_t
{
    WhenSelectionFollowsFocus = 0,
    Always = 1,
    Never = 2,
};

enum class ParallaxSourceOffsetKind : int32_t
{
    Absolute = 0,
    Relative = 1,
};

enum class RefreshPullDirection : int32_t
{
    LeftToRight = 0,
    TopToBottom = 1,
    RightToLeft = 2,
    BottomToTop = 3,
};

enum class RefreshVisualizerOrientation : int32_t
{
    Auto = 0,
    Normal = 1,
    Rotate90DegreesCounterclockwise = 2,
    Rotate270DegreesCounterclockwise = 3,
};

enum class RefreshVisualizerState : int32_t
{
    Idle = 0,
    Peeking = 1,
    Interacting = 2,
    Pending = 3,
    Refreshing = 4,
};

enum class SwipeBehaviorOnInvoked : int32_t
{
    Auto = 0,
    Close = 1,
    RemainOpen = 2,
};

enum class SwipeMode : int32_t
{
    Reveal = 0,
    Execute = 1,
};

enum class TreeViewSelectionMode : int32_t
{
    None = 0,
    Single = 1,
    Multiple = 2,
};

struct IBitmapIconSource;
struct IBitmapIconSourceFactory;
struct IBitmapIconSourceStatics;
struct IColorChangedEventArgs;
struct IColorPicker;
struct IColorPickerFactory;
struct IColorPickerStatics;
struct ICommandBarFlyout;
struct ICommandBarFlyoutFactory;
struct IDropDownButton;
struct IDropDownButtonAutomationPeer;
struct IDropDownButtonAutomationPeerFactory;
struct IDropDownButtonFactory;
struct IFontIconSource;
struct IFontIconSourceFactory;
struct IFontIconSourceStatics;
struct IIconSource;
struct IIconSourceFactory;
struct IIconSourceStatics;
struct IMenuBar;
struct IMenuBarFactory;
struct IMenuBarItem;
struct IMenuBarItemFactory;
struct IMenuBarItemFlyout;
struct IMenuBarItemFlyoutFactory;
struct IMenuBarItemStatics;
struct IMenuBarStatics;
struct INavigationView;
struct INavigationViewBackRequestedEventArgs;
struct INavigationViewDisplayModeChangedEventArgs;
struct INavigationViewFactory;
struct INavigationViewItem;
struct INavigationViewItemBase;
struct INavigationViewItemBaseFactory;
struct INavigationViewItemFactory;
struct INavigationViewItemHeader;
struct INavigationViewItemHeaderFactory;
struct INavigationViewItemInvokedEventArgs;
struct INavigationViewItemSeparator;
struct INavigationViewItemSeparatorFactory;
struct INavigationViewItemStatics;
struct INavigationViewList;
struct INavigationViewListFactory;
struct INavigationViewPaneClosingEventArgs;
struct INavigationViewSelectionChangedEventArgs;
struct INavigationViewStatics;
struct INavigationViewTemplateSettings;
struct INavigationViewTemplateSettingsFactory;
struct INavigationViewTemplateSettingsStatics;
struct IParallaxView;
struct IParallaxViewFactory;
struct IParallaxViewStatics;
struct IPathIconSource;
struct IPathIconSourceFactory;
struct IPathIconSourceStatics;
struct IPersonPicture;
struct IPersonPictureFactory;
struct IPersonPictureStatics;
struct IRatingControl;
struct IRatingControlFactory;
struct IRatingControlStatics;
struct IRatingItemFontInfo;
struct IRatingItemFontInfoFactory;
struct IRatingItemFontInfoStatics;
struct IRatingItemImageInfo;
struct IRatingItemImageInfoFactory;
struct IRatingItemImageInfoStatics;
struct IRatingItemInfo;
struct IRatingItemInfoFactory;
struct IRefreshContainer;
struct IRefreshContainerFactory;
struct IRefreshContainerStatics;
struct IRefreshInteractionRatioChangedEventArgs;
struct IRefreshRequestedEventArgs;
struct IRefreshStateChangedEventArgs;
struct IRefreshVisualizer;
struct IRefreshVisualizerFactory;
struct IRefreshVisualizerStatics;
struct ISplitButton;
struct ISplitButtonAutomationPeer;
struct ISplitButtonAutomationPeerFactory;
struct ISplitButtonClickEventArgs;
struct ISplitButtonFactory;
struct ISplitButtonStatics;
struct ISwipeControl;
struct ISwipeControlFactory;
struct ISwipeControlStatics;
struct ISwipeItem;
struct ISwipeItemFactory;
struct ISwipeItemInvokedEventArgs;
struct ISwipeItemStatics;
struct ISwipeItems;
struct ISwipeItemsFactory;
struct ISwipeItemsStatics;
struct ISymbolIconSource;
struct ISymbolIconSourceFactory;
struct ISymbolIconSourceStatics;
struct ITextCommandBarFlyout;
struct ITextCommandBarFlyoutFactory;
struct IToggleSplitButton;
struct IToggleSplitButtonAutomationPeer;
struct IToggleSplitButtonAutomationPeerFactory;
struct IToggleSplitButtonFactory;
struct IToggleSplitButtonIsCheckedChangedEventArgs;
struct ITreeView;
struct ITreeViewCollapsedEventArgs;
struct ITreeViewDragItemsCompletedEventArgs;
struct ITreeViewDragItemsStartingEventArgs;
struct ITreeViewExpandingEventArgs;
struct ITreeViewFactory;
struct ITreeViewItem;
struct ITreeViewItemFactory;
struct ITreeViewItemInvokedEventArgs;
struct ITreeViewItemStatics;
struct ITreeViewItemTemplateSettings;
struct ITreeViewItemTemplateSettingsFactory;
struct ITreeViewItemTemplateSettingsStatics;
struct ITreeViewList;
struct ITreeViewListFactory;
struct ITreeViewNode;
struct ITreeViewNodeFactory;
struct ITreeViewNodeStatics;
struct ITreeViewStatics;
struct IXamlControlsResources;
struct IXamlControlsResourcesStatics;
struct BitmapIconSource;
struct ColorChangedEventArgs;
struct ColorPicker;
struct CommandBarFlyout;
struct DropDownButton;
struct DropDownButtonAutomationPeer;
struct FontIconSource;
struct IconSource;
struct MenuBar;
struct MenuBarItem;
struct MenuBarItemFlyout;
struct NavigationView;
struct NavigationViewBackRequestedEventArgs;
struct NavigationViewDisplayModeChangedEventArgs;
struct NavigationViewItem;
struct NavigationViewItemBase;
struct NavigationViewItemHeader;
struct NavigationViewItemInvokedEventArgs;
struct NavigationViewItemSeparator;
struct NavigationViewList;
struct NavigationViewPaneClosingEventArgs;
struct NavigationViewSelectionChangedEventArgs;
struct NavigationViewTemplateSettings;
struct ParallaxView;
struct PathIconSource;
struct PersonPicture;
struct RatingControl;
struct RatingItemFontInfo;
struct RatingItemImageInfo;
struct RatingItemInfo;
struct RefreshContainer;
struct RefreshInteractionRatioChangedEventArgs;
struct RefreshRequestedEventArgs;
struct RefreshStateChangedEventArgs;
struct RefreshVisualizer;
struct SplitButton;
struct SplitButtonAutomationPeer;
struct SplitButtonClickEventArgs;
struct SwipeControl;
struct SwipeItem;
struct SwipeItemInvokedEventArgs;
struct SwipeItems;
struct SymbolIconSource;
struct TextCommandBarFlyout;
struct ToggleSplitButton;
struct ToggleSplitButtonAutomationPeer;
struct ToggleSplitButtonIsCheckedChangedEventArgs;
struct TreeView;
struct TreeViewCollapsedEventArgs;
struct TreeViewDragItemsCompletedEventArgs;
struct TreeViewDragItemsStartingEventArgs;
struct TreeViewExpandingEventArgs;
struct TreeViewItem;
struct TreeViewItemInvokedEventArgs;
struct TreeViewItemTemplateSettings;
struct TreeViewList;
struct TreeViewNode;
struct XamlControlsResources;

}

namespace winrt::impl {

template <> struct category<Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IColorPicker>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IDropDownButton>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeer>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IFontIconSource>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IIconSource>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBar>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItem>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationView>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItem>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewList>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewListFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IParallaxView>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IPathIconSource>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IPersonPicture>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingControl>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshContainer>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButton>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeer>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeControl>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItem>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItems>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeView>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItem>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewList>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewNode>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::BitmapIconSource>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ColorPicker>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::CommandBarFlyout>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::DropDownButton>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::DropDownButtonAutomationPeer>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::FontIconSource>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::IconSource>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::MenuBar>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::MenuBarItem>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationView>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItem>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewList>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ParallaxView>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::PathIconSource>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::PersonPicture>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RatingControl>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RatingItemFontInfo>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RatingItemImageInfo>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RatingItemInfo>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshContainer>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshVisualizer>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SplitButton>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SplitButtonAutomationPeer>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SwipeControl>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SwipeItem>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SwipeItems>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SymbolIconSource>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ToggleSplitButton>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ToggleSplitButtonAutomationPeer>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeView>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewItem>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewList>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewNode>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::XamlControlsResources>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ColorSpectrumShape>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshPullDirection>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::RefreshVisualizerState>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::SwipeMode>{ using type = enum_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewSelectionMode>{ using type = enum_category; };
template <> struct name<Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IBitmapIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IBitmapIconSourceFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IBitmapIconSourceStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IColorChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IColorPicker>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IColorPicker" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IColorPickerFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IColorPickerStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ICommandBarFlyout" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ICommandBarFlyoutFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IDropDownButton>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IDropDownButton" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IDropDownButtonAutomationPeer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IDropDownButtonAutomationPeerFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IDropDownButtonFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IFontIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IFontIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IFontIconSourceFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IFontIconSourceStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IIconSourceFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IIconSourceStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBar>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBar" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBarFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBarItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBarItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBarItemFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBarItemFlyout" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBarItemFlyoutFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBarItemStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IMenuBarStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationView>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationView" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewBackRequestedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewDisplayModeChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemBase" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemBaseFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemHeader" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemHeaderFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemSeparator" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemSeparatorFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewItemStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewList>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewList" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewListFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewListFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewPaneClosingEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettings" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IParallaxView>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IParallaxView" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IParallaxViewFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IParallaxViewStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IPathIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IPathIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IPathIconSourceFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IPathIconSourceStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IPersonPicture>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IPersonPicture" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IPersonPictureFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IPersonPictureStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingControl>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingControl" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingControlFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingControlStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfo" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfoFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfoStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfo" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfoFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfoStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemInfo" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRatingItemInfoFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshContainer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshContainer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshContainerFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshContainerStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshInteractionRatioChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshRequestedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshStateChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshVisualizer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshVisualizerFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IRefreshVisualizerStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISplitButton>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISplitButton" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISplitButtonAutomationPeer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISplitButtonAutomationPeerFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISplitButtonClickEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISplitButtonFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISplitButtonStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeControl>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeControl" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeControlFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeControlStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeItemFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeItemInvokedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeItemStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeItems>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeItems" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeItemsFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISwipeItemsStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISymbolIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISymbolIconSourceFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ISymbolIconSourceStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITextCommandBarFlyout" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITextCommandBarFlyoutFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IToggleSplitButton" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonAutomationPeer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonAutomationPeerFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonIsCheckedChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeView>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeView" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewCollapsedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewDragItemsCompletedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewDragItemsStartingEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewExpandingEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewItemFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewItemInvokedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewItemStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettings" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewList>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewList" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewListFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewNode>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewNode" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewNodeFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewNodeStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ITreeViewStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IXamlControlsResources" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IXamlControlsResourcesStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::BitmapIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.BitmapIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ColorChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ColorPicker>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ColorPicker" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::CommandBarFlyout>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.CommandBarFlyout" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::DropDownButton>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.DropDownButton" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::DropDownButtonAutomationPeer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.DropDownButtonAutomationPeer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::FontIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.FontIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::IconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.IconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::MenuBar>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.MenuBar" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::MenuBarItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.MenuBarItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.MenuBarItemFlyout" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationView>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationView" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewItemBase" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewItemHeader" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewList>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewList" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ParallaxView>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ParallaxView" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::PathIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.PathIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::PersonPicture>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.PersonPicture" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RatingControl>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RatingControl" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RatingItemFontInfo>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RatingItemFontInfo" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RatingItemImageInfo>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RatingItemImageInfo" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RatingItemInfo>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RatingItemInfo" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshContainer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshContainer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshVisualizer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshVisualizer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SplitButton>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SplitButton" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SplitButtonAutomationPeer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SplitButtonAutomationPeer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SplitButtonClickEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SwipeControl>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SwipeControl" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SwipeItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SwipeItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SwipeItemInvokedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SwipeItems>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SwipeItems" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SymbolIconSource>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SymbolIconSource" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TextCommandBarFlyout" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ToggleSplitButton>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ToggleSplitButton" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ToggleSplitButtonAutomationPeer>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ToggleSplitButtonAutomationPeer" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeView>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeView" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewItem>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewItem" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewItemInvokedEventArgs" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewList>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewList" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewNode>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewNode" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::XamlControlsResources>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.XamlControlsResources" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ColorSpectrumComponents" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ColorSpectrumShape>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ColorSpectrumShape" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshPullDirection>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshPullDirection" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshVisualizerOrientation" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::RefreshVisualizerState>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.RefreshVisualizerState" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SwipeBehaviorOnInvoked" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::SwipeMode>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.SwipeMode" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::TreeViewSelectionMode>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.TreeViewSelectionMode" }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ static constexpr guid value{ 0xA6B6CCCC,0xEA8F,0x53CA,{ 0x83,0x1F,0x2A,0xBE,0x85,0xCD,0x6D,0x8C } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ static constexpr guid value{ 0x7D484C14,0xF5F6,0x5E39,{ 0xB4,0xE4,0xB6,0x10,0x8D,0x2E,0xE0,0x95 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ static constexpr guid value{ 0x7E603B56,0x5580,0x5A9B,{ 0x90,0x0D,0x05,0x64,0x16,0x2A,0x5F,0x37 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ static constexpr guid value{ 0x148D57A2,0xB1CB,0x5F5D,{ 0xB6,0xB5,0x51,0x28,0x05,0xD7,0x17,0x61 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IColorPicker>{ static constexpr guid value{ 0xAE72B24B,0xF93F,0x5A19,{ 0x8C,0xE4,0xA1,0x8B,0x73,0xC3,0x35,0x6D } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ static constexpr guid value{ 0x72C350E2,0x0A20,0x5B9B,{ 0xAC,0x54,0x63,0x3B,0x97,0xD7,0xFF,0xDE } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ static constexpr guid value{ 0xAF1E1848,0x98DE,0x569E,{ 0xA8,0x4B,0x1C,0x88,0xBB,0xD0,0xD4,0x79 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ static constexpr guid value{ 0xF8F5B8BC,0x8D67,0x5FA9,{ 0x8F,0xB0,0xC2,0xC3,0x31,0x1E,0x1B,0x7C } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ static constexpr guid value{ 0xA194DBE6,0x4311,0x5BD2,{ 0xA8,0xEB,0xB4,0x9C,0x47,0x33,0xA3,0x3C } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IDropDownButton>{ static constexpr guid value{ 0xC1E9FA91,0x4F95,0x5796,{ 0x8A,0x7B,0x3B,0x75,0x94,0xA1,0x2C,0x69 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeer>{ static constexpr guid value{ 0xB547A7D2,0xDA6B,0x5BBB,{ 0xBA,0xAC,0x3A,0x44,0xCE,0xC3,0x38,0xB6 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>{ static constexpr guid value{ 0xB4FA11C9,0x0468,0x50EC,{ 0xA7,0xE2,0x20,0xF7,0xE2,0x6E,0x71,0x4D } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ static constexpr guid value{ 0x7CF3E13B,0x668D,0x57E7,{ 0xB5,0xD6,0xF5,0xCA,0x3D,0xBC,0x80,0xBD } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IFontIconSource>{ static constexpr guid value{ 0xDDF34704,0xC53D,0x571C,{ 0x89,0x0F,0x3B,0x5E,0x30,0x5D,0xDC,0x69 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ static constexpr guid value{ 0xBB40EEEE,0x64D1,0x5133,{ 0xB1,0xD6,0xAE,0x13,0xC2,0x1B,0x66,0x78 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ static constexpr guid value{ 0x12C4716A,0x31C1,0x510A,{ 0x95,0x26,0x01,0xAB,0x3E,0x2B,0x07,0x38 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IIconSource>{ static constexpr guid value{ 0x2A5D0830,0x2080,0x5272,{ 0xA7,0x4A,0x2B,0x53,0x50,0xC5,0x2A,0x33 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ static constexpr guid value{ 0xE8BC19C6,0x9A64,0x5C54,{ 0x93,0x38,0xE1,0x8E,0x07,0x68,0x75,0xBF } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ static constexpr guid value{ 0x4DA53AB6,0x8945,0x562B,{ 0xA1,0xA5,0xFA,0xB5,0xE2,0xE8,0xD5,0x75 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBar>{ static constexpr guid value{ 0xBA97F337,0x8F1E,0x5141,{ 0xB5,0x3F,0xE7,0x7A,0x8B,0xA3,0xEB,0xBD } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ static constexpr guid value{ 0x76AA8759,0x04EE,0x5A4C,{ 0xB9,0x8C,0xD0,0x37,0x42,0xD4,0x7C,0xDB } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBarItem>{ static constexpr guid value{ 0x9CAA4261,0x3A0C,0x5A59,{ 0x8C,0xFE,0x39,0x17,0x44,0xC3,0xF8,0x15 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ static constexpr guid value{ 0x87D02172,0x83CB,0x5459,{ 0x94,0x0F,0x17,0x3F,0x75,0x01,0xB3,0x00 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ static constexpr guid value{ 0xA412AE4F,0xC3BC,0x5679,{ 0x8D,0x5F,0x86,0x5E,0xB9,0x7E,0x83,0xCD } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ static constexpr guid value{ 0xF895123E,0xED54,0x5A96,{ 0x84,0x18,0xF3,0x5E,0x48,0x50,0x5D,0x43 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ static constexpr guid value{ 0x6282E536,0x1CFC,0x5D26,{ 0x9F,0x6D,0x8F,0x33,0x4D,0xAF,0x99,0x7E } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ static constexpr guid value{ 0x10CB12F4,0xDCE0,0x514F,{ 0xAC,0xD1,0x0D,0x53,0xFA,0x02,0x75,0xD1 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationView>{ static constexpr guid value{ 0xD95BDC4D,0xC72D,0x540A,{ 0xAF,0xAC,0x78,0x83,0x27,0xB4,0x65,0x45 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ static constexpr guid value{ 0xAE752207,0xBD1B,0x5AFA,{ 0xA8,0x72,0xE9,0xBB,0xAE,0xEA,0x0E,0xDE } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ static constexpr guid value{ 0x58DCF1EA,0x9E56,0x522C,{ 0xB3,0xF8,0x34,0xBD,0x55,0xEC,0xAC,0xA4 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ static constexpr guid value{ 0xFFEA1ADA,0x9232,0x5507,{ 0xA3,0x20,0xED,0x2F,0xAD,0xBE,0x61,0x27 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItem>{ static constexpr guid value{ 0x30DA6E7A,0xAF6D,0x51AE,{ 0x97,0x70,0xE2,0x2C,0x43,0xDB,0x54,0xF5 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ static constexpr guid value{ 0x33586494,0xAF48,0x513F,{ 0xBE,0x4D,0xF6,0x45,0xE8,0xC8,0x90,0x05 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ static constexpr guid value{ 0x31B9D7B1,0x7C38,0x5916,{ 0x99,0xC6,0xC7,0x1F,0x6B,0x01,0x2B,0x1B } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ static constexpr guid value{ 0xDE60A001,0x9385,0x5535,{ 0x80,0xE1,0x2B,0x68,0xF4,0xBF,0xDE,0x26 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ static constexpr guid value{ 0x432BC062,0x45BC,0x57EF,{ 0xA2,0xD3,0x11,0x85,0x1A,0x56,0xA8,0x82 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ static constexpr guid value{ 0x6A5447CD,0x2918,0x5FE3,{ 0x89,0x9B,0x93,0xD6,0x96,0x12,0x85,0xE6 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ static constexpr guid value{ 0x6D5E3674,0xA3E7,0x5FEB,{ 0x85,0x48,0x6F,0x10,0xD9,0x25,0x6D,0x2A } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ static constexpr guid value{ 0xE3C35630,0x1D5F,0x5689,{ 0xA0,0xCB,0x87,0x94,0x48,0x5C,0xAA,0xCF } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ static constexpr guid value{ 0x181266A1,0xD4F8,0x5AF7,{ 0x81,0x0B,0xAE,0xE8,0xA1,0xD4,0x52,0xED } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ static constexpr guid value{ 0x35A0DF71,0xC966,0x57CE,{ 0x86,0x81,0x46,0x40,0xE4,0xF7,0x1A,0xFF } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewList>{ static constexpr guid value{ 0xC5B3C903,0x40EF,0x573E,{ 0x84,0xB9,0x1D,0xB2,0x79,0xEC,0x5E,0xF2 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewListFactory>{ static constexpr guid value{ 0x35AFB786,0xC86B,0x5960,{ 0x9F,0x47,0x27,0x02,0x8C,0x07,0x4F,0x9A } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ static constexpr guid value{ 0xE8643304,0x6DB4,0x5AF5,{ 0xBA,0xC2,0x62,0x73,0x3C,0xA0,0x37,0xDA } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ static constexpr guid value{ 0x1D0863EE,0xCB87,0x5BA2,{ 0xAA,0x8F,0x98,0x1A,0x93,0xDD,0x48,0xB2 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ static constexpr guid value{ 0xB6495F19,0xEB64,0x5811,{ 0x9B,0x7B,0x4C,0x3E,0x07,0x53,0x99,0xDC } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ static constexpr guid value{ 0xCE777BA7,0x5036,0x5DC5,{ 0x8A,0x1F,0x95,0x34,0x24,0xF2,0x8E,0x40 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ static constexpr guid value{ 0x34FF6C94,0x6465,0x5F3E,{ 0xB0,0xA5,0x4F,0x1E,0xEA,0x48,0xE7,0x43 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ static constexpr guid value{ 0x450DF7FB,0x2E2F,0x5917,{ 0x89,0x3B,0x67,0xE3,0x66,0xF4,0x6F,0xAD } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IParallaxView>{ static constexpr guid value{ 0x692E1E53,0x4231,0x5DE0,{ 0xAC,0xB4,0x85,0x9E,0x49,0x4D,0xAB,0x73 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ static constexpr guid value{ 0x61DC973D,0xC595,0x5261,{ 0xA9,0xB7,0x35,0xF4,0x10,0x42,0xEB,0x00 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ static constexpr guid value{ 0xB17A0882,0xE92E,0x5AA0,{ 0x92,0xD5,0x3D,0xE6,0x9F,0x0E,0x6A,0xA8 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IPathIconSource>{ static constexpr guid value{ 0x3C89356E,0x0A21,0x5E5E,{ 0xA2,0xBA,0xD8,0x83,0x73,0x65,0x14,0x3B } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ static constexpr guid value{ 0x9FEFE31E,0x5AB6,0x5394,{ 0xA6,0xEF,0x67,0x2F,0x17,0x4D,0x33,0x3B } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ static constexpr guid value{ 0x1CA1C9F2,0x2E93,0x5877,{ 0xB6,0x40,0x83,0x61,0x42,0xC2,0xFA,0xC0 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IPersonPicture>{ static constexpr guid value{ 0x537ECA07,0xFEFF,0x5AC7,{ 0xB6,0x8C,0xBF,0x1B,0xE0,0x81,0xC2,0xEF } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ static constexpr guid value{ 0x7EC0794C,0xF2CC,0x5282,{ 0xA8,0x9D,0xCD,0x3B,0xB7,0x65,0xB7,0x1A } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ static constexpr guid value{ 0xD1AFCF40,0xB7BB,0x5873,{ 0x9A,0xB5,0x9E,0xE6,0xF0,0x65,0xDD,0x1E } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingControl>{ static constexpr guid value{ 0x5488193B,0xEA4B,0x52C6,{ 0x85,0x44,0xC0,0x63,0x21,0x9B,0xCD,0x90 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ static constexpr guid value{ 0xA53B9B73,0xBFF9,0x548D,{ 0xA2,0x94,0xAC,0x63,0xD8,0x19,0xF7,0x8A } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ static constexpr guid value{ 0x3752A048,0xF3F2,0x5EF6,{ 0x87,0x8D,0x49,0x95,0x72,0xF0,0x52,0x9B } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ static constexpr guid value{ 0x995A16DC,0x3A0F,0x5727,{ 0x9F,0x38,0x52,0xCF,0xC8,0x14,0x36,0x54 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ static constexpr guid value{ 0x109C6541,0x706E,0x5FD7,{ 0xBA,0xAE,0x02,0x0B,0x24,0x89,0x9F,0x61 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ static constexpr guid value{ 0x7C626902,0xA13F,0x5470,{ 0xA5,0x22,0xBD,0x54,0x14,0xDF,0x8E,0xD3 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ static constexpr guid value{ 0x610268E4,0xAF6E,0x5C1C,{ 0x8D,0x0F,0xBB,0x46,0xC0,0x6D,0x67,0x82 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ static constexpr guid value{ 0x4ACC8CAC,0xBCA8,0x5380,{ 0x95,0xE4,0x34,0x5C,0x1B,0xE2,0x56,0xB2 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ static constexpr guid value{ 0xB8E6F05B,0x0AF5,0x5AA8,{ 0x8E,0x85,0xFD,0x02,0x2D,0x4C,0x69,0x08 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ static constexpr guid value{ 0x801E924E,0x3613,0x55DD,{ 0x83,0x21,0x9E,0xBA,0xBB,0xED,0x0B,0x8A } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ static constexpr guid value{ 0x61F13480,0xCD0C,0x556A,{ 0xB5,0x32,0xA0,0xCF,0x53,0xE3,0xCD,0xA0 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshContainer>{ static constexpr guid value{ 0x1C9778E8,0xA427,0x5F86,{ 0x9D,0x5E,0x02,0xDB,0x9B,0x2C,0x40,0x93 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ static constexpr guid value{ 0x5F228FA1,0x2EA2,0x52B5,{ 0xB7,0x8A,0x0C,0x13,0x3F,0x86,0xF0,0x20 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ static constexpr guid value{ 0x1F2BC1C8,0x5C8F,0x5B46,{ 0x8B,0x0F,0xE0,0x06,0xDB,0x4E,0xC6,0xE1 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ static constexpr guid value{ 0x790B70E0,0xF199,0x552B,{ 0xB1,0x26,0x6C,0xB4,0x5C,0x2D,0xE8,0xF9 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ static constexpr guid value{ 0xED97A956,0x6019,0x5329,{ 0x93,0x12,0xF8,0x85,0xB5,0xC7,0x74,0xCD } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ static constexpr guid value{ 0x7BE897CE,0x17C4,0x5FDF,{ 0xB4,0x41,0xC6,0xEF,0x33,0x01,0xE0,0xF6 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ static constexpr guid value{ 0xA000AFD1,0xD2FC,0x5391,{ 0xB4,0x21,0xEE,0x5C,0x97,0x5A,0xC9,0x45 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ static constexpr guid value{ 0x9D6F2BF2,0x6628,0x582A,{ 0x89,0x2B,0x68,0xC2,0x77,0x0C,0x17,0x3C } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ static constexpr guid value{ 0x7E9E32AB,0x3C39,0x58AC,{ 0x9D,0x0D,0x46,0x48,0xBE,0x22,0x0B,0xDC } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISplitButton>{ static constexpr guid value{ 0x8B09006A,0x6241,0x594F,{ 0x93,0xE4,0x8B,0xF0,0x51,0xD7,0xBA,0x8F } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeer>{ static constexpr guid value{ 0x19CD9B8A,0xEBFE,0x543D,{ 0xA9,0x42,0x7A,0x8E,0x98,0xE2,0x37,0xF6 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>{ static constexpr guid value{ 0x8C87CF4E,0xB4DF,0x50A0,{ 0xBF,0x5C,0x07,0x97,0x2E,0xE0,0x7D,0x28 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ static constexpr guid value{ 0x6AF896C2,0xE65A,0x5998,{ 0x9C,0x82,0x2A,0xF8,0xF3,0xE0,0x74,0x1F } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ static constexpr guid value{ 0x07510092,0x2612,0x55E7,{ 0x98,0x1C,0xA5,0x36,0xDD,0xD4,0x57,0x0E } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ static constexpr guid value{ 0x7262C1E0,0x97CD,0x5561,{ 0xB6,0xE7,0x5E,0x2E,0xCE,0xA4,0x6A,0xC2 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeControl>{ static constexpr guid value{ 0x337800FE,0xF51D,0x5F6B,{ 0x9D,0x35,0xE7,0xF5,0xDE,0x10,0xA9,0x7C } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ static constexpr guid value{ 0x6E9213F4,0x30C1,0x56CA,{ 0x99,0x05,0x46,0xAA,0x1A,0x83,0xDF,0xC1 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ static constexpr guid value{ 0xBE0EB518,0x40B4,0x5CED,{ 0x8D,0xFB,0x6C,0xA0,0x18,0xF1,0xCA,0xCA } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeItem>{ static constexpr guid value{ 0x560FE6C5,0x109F,0x5866,{ 0xB0,0x2E,0x31,0xE4,0xFA,0x93,0x0E,0xD0 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ static constexpr guid value{ 0x011513E1,0x1ADC,0x5A69,{ 0xA7,0x4F,0x62,0x3F,0xCC,0x18,0xA5,0x1C } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ static constexpr guid value{ 0x7BF51C95,0x53A2,0x5A0D,{ 0xBB,0x32,0x2B,0x4B,0x1F,0x7D,0x2F,0x20 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ static constexpr guid value{ 0x793256E1,0x27C7,0x5387,{ 0xBB,0x27,0x53,0xD0,0x72,0x72,0x36,0x25 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeItems>{ static constexpr guid value{ 0x40D3022B,0xC82B,0x5565,{ 0xA4,0xE4,0xAD,0x9D,0x7A,0x66,0xB1,0xA9 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ static constexpr guid value{ 0x9A5D7D77,0x39BD,0x5B81,{ 0xAB,0x4E,0xF4,0x4A,0xCA,0x6E,0xDE,0x3F } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ static constexpr guid value{ 0x78D47697,0xEAF2,0x5652,{ 0x9A,0xFC,0xD7,0x13,0xCA,0x10,0x34,0x88 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ static constexpr guid value{ 0x1F8098D4,0xF3EA,0x5360,{ 0xB0,0xAA,0x80,0x65,0xBB,0x72,0x26,0xAE } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ static constexpr guid value{ 0xAFBF55FA,0xFF79,0x552A,{ 0xA3,0xA1,0x48,0xE2,0xEF,0x17,0x15,0x2A } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ static constexpr guid value{ 0x967C25AF,0x2A94,0x5E50,{ 0xA9,0x21,0x58,0x7D,0x8F,0xE8,0x11,0x43 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ static constexpr guid value{ 0x6D0F38A5,0x0EB3,0x5D73,{ 0x81,0x95,0xD2,0xD8,0x9B,0x76,0xB0,0xF7 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ static constexpr guid value{ 0x5C56A34F,0x621F,0x55F2,{ 0x8D,0x71,0x3E,0x3A,0x6E,0x69,0x06,0xBD } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ static constexpr guid value{ 0x5C0F247B,0xBD00,0x5509,{ 0x88,0xA8,0xB0,0x90,0x07,0xAE,0x22,0xB0 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>{ static constexpr guid value{ 0xA5888C99,0x174C,0x5C22,{ 0xA6,0x18,0x32,0xEA,0x86,0xF4,0x23,0x27 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>{ static constexpr guid value{ 0xEBF3C917,0xE843,0x51D7,{ 0x88,0xF9,0xE7,0x3C,0x04,0x42,0xCB,0xB8 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ static constexpr guid value{ 0x25459D02,0x0FFC,0x5C7C,{ 0xAF,0x56,0xF5,0x5A,0xAD,0x6D,0xB5,0xE7 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ static constexpr guid value{ 0x6CAB1E15,0xC017,0x5760,{ 0x82,0x8B,0xDA,0xFC,0x21,0xD5,0x4E,0xB2 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeView>{ static constexpr guid value{ 0x45794C76,0x9C29,0x527A,{ 0xAF,0x88,0xB2,0xF0,0xBB,0x77,0x2B,0xE4 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ static constexpr guid value{ 0x8CF22168,0xD31E,0x5EE9,{ 0xA9,0x09,0xB7,0xE5,0x20,0x85,0xD3,0x5B } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ static constexpr guid value{ 0xE5B8547E,0xF839,0x55DB,{ 0x9C,0x26,0x2A,0x95,0xF5,0x7A,0x60,0xDC } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ static constexpr guid value{ 0x1B6C4FFC,0xCD32,0x5E06,{ 0xB7,0x82,0xDF,0x9F,0x07,0x75,0x46,0xC7 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ static constexpr guid value{ 0x165AF9D6,0xA4EB,0x577F,{ 0x8D,0x92,0x1A,0x37,0x49,0x26,0x69,0x1A } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ static constexpr guid value{ 0x9C6220BE,0xF9EB,0x518A,{ 0xB3,0x0E,0x7E,0x41,0xDE,0x5E,0xFD,0xA9 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewItem>{ static constexpr guid value{ 0xCBAE6B02,0x8044,0x50E1,{ 0xB6,0x7C,0x83,0x00,0x40,0xA5,0xEF,0xD8 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ static constexpr guid value{ 0x878FD918,0xE77E,0x5BE8,{ 0x8C,0x8A,0xB7,0x9B,0x27,0xB0,0x8D,0x9B } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ static constexpr guid value{ 0x1A05853C,0xB101,0x542C,{ 0x9A,0x1E,0x77,0x5A,0x04,0x4C,0x46,0x52 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ static constexpr guid value{ 0xB304730A,0xAA4D,0x5BCB,{ 0xAE,0x9A,0x00,0xE3,0x6B,0x26,0x63,0xDA } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ static constexpr guid value{ 0x35B92371,0x3A10,0x5F55,{ 0x89,0xEA,0x59,0xDB,0x9A,0x1D,0x02,0xCD } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ static constexpr guid value{ 0x1D1A66E3,0xF56D,0x5D7F,{ 0x94,0x2C,0xF3,0xA8,0x7F,0x5C,0x55,0x2E } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ static constexpr guid value{ 0x1E4667C8,0x459A,0x5A36,{ 0xB1,0x31,0x21,0x59,0xCC,0x2F,0xE5,0x43 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewList>{ static constexpr guid value{ 0x94CEE57B,0x7085,0x5A6A,{ 0xAA,0xC3,0x18,0x45,0x09,0xB8,0xEC,0xE0 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ static constexpr guid value{ 0x461499A0,0x68CF,0x5B81,{ 0xB0,0xE4,0xB1,0xAF,0x92,0x9B,0x0B,0x12 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewNode>{ static constexpr guid value{ 0x00378A74,0x790B,0x5328,{ 0x8A,0xFA,0x7D,0x65,0xE2,0x2D,0xA4,0x26 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ static constexpr guid value{ 0xC105A5E5,0xCEA8,0x5EFD,{ 0x8B,0xE8,0x3D,0x89,0xB5,0x4C,0xBD,0x5F } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ static constexpr guid value{ 0x1FEF99A7,0x988F,0x503C,{ 0xA9,0x19,0x87,0xD5,0x5D,0xC9,0x0D,0xF8 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ static constexpr guid value{ 0x3F241461,0x6852,0x5EA1,{ 0xBA,0xB7,0xD5,0x93,0x09,0xE0,0x3B,0xBE } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ static constexpr guid value{ 0x0E35A094,0x868E,0x5FBE,{ 0xA9,0x2E,0x2E,0x22,0x4A,0x78,0x1D,0xD5 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ static constexpr guid value{ 0x8FB9EB9B,0x850A,0x5225,{ 0x96,0xCF,0xA7,0x20,0x36,0x04,0x33,0x42 } }; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::BitmapIconSource>{ using type = Microsoft::UI::Xaml::Controls::IBitmapIconSource; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IColorChangedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::ColorPicker>{ using type = Microsoft::UI::Xaml::Controls::IColorPicker; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::CommandBarFlyout>{ using type = Microsoft::UI::Xaml::Controls::ICommandBarFlyout; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::DropDownButton>{ using type = Microsoft::UI::Xaml::Controls::IDropDownButton; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::DropDownButtonAutomationPeer>{ using type = Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeer; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::FontIconSource>{ using type = Microsoft::UI::Xaml::Controls::IFontIconSource; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::IconSource>{ using type = Microsoft::UI::Xaml::Controls::IIconSource; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::MenuBar>{ using type = Microsoft::UI::Xaml::Controls::IMenuBar; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::MenuBarItem>{ using type = Microsoft::UI::Xaml::Controls::IMenuBarItem; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationView>{ using type = Microsoft::UI::Xaml::Controls::INavigationView; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItem>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItem; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemBase; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemHeader; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewList>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewList; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::ParallaxView>{ using type = Microsoft::UI::Xaml::Controls::IParallaxView; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::PathIconSource>{ using type = Microsoft::UI::Xaml::Controls::IPathIconSource; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::PersonPicture>{ using type = Microsoft::UI::Xaml::Controls::IPersonPicture; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingControl>{ using type = Microsoft::UI::Xaml::Controls::IRatingControl; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingItemFontInfo>{ using type = Microsoft::UI::Xaml::Controls::IRatingItemFontInfo; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingItemImageInfo>{ using type = Microsoft::UI::Xaml::Controls::IRatingItemImageInfo; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingItemInfo>{ using type = Microsoft::UI::Xaml::Controls::IRatingItemInfo; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshContainer>{ using type = Microsoft::UI::Xaml::Controls::IRefreshContainer; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshVisualizer>{ using type = Microsoft::UI::Xaml::Controls::IRefreshVisualizer; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SplitButton>{ using type = Microsoft::UI::Xaml::Controls::ISplitButton; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SplitButtonAutomationPeer>{ using type = Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeer; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeControl>{ using type = Microsoft::UI::Xaml::Controls::ISwipeControl; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeItem>{ using type = Microsoft::UI::Xaml::Controls::ISwipeItem; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeItems>{ using type = Microsoft::UI::Xaml::Controls::ISwipeItems; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::SymbolIconSource>{ using type = Microsoft::UI::Xaml::Controls::ISymbolIconSource; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::ToggleSplitButton>{ using type = Microsoft::UI::Xaml::Controls::IToggleSplitButton; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::ToggleSplitButtonAutomationPeer>{ using type = Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeView>{ using type = Microsoft::UI::Xaml::Controls::ITreeView; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewItem>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewItem; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewList>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewList; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewNode>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewNode; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::XamlControlsResources>{ using type = Microsoft::UI::Xaml::Controls::IXamlControlsResources; };

template <> struct abi<Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_UriSource(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_UriSource(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ShowAsMonochrome(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ShowAsMonochrome(bool value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_UriSourceProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ShowAsMonochromeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_OldColor(struct struct_Windows_UI_Color* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_NewColor(struct struct_Windows_UI_Color* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IColorPicker>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PreviousColor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PreviousColor(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsAlphaEnabled(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsAlphaEnabled(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorSpectrumVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsColorSpectrumVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorPreviewVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsColorPreviewVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorSliderVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsColorSliderVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsAlphaSliderVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsAlphaSliderVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsMoreButtonVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsMoreButtonVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorChannelTextInputVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsColorChannelTextInputVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsAlphaTextInputVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsAlphaTextInputVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsHexInputVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsHexInputVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinHue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MinHue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxHue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxHue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinSaturation(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MinSaturation(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxSaturation(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxSaturation(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinValue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MinValue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxValue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxValue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ColorSpectrumShape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ColorSpectrumShape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ColorSpectrumComponents(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ColorSpectrumComponents(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents value) noexcept = 0;
    virtual int32_t WINRT_CALL add_ColorChanged(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_ColorChanged(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ColorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PreviousColorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsAlphaEnabledProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorSpectrumVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorPreviewVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorSliderVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsAlphaSliderVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsMoreButtonVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsColorChannelTextInputVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsAlphaTextInputVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsHexInputVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinHueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxHueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinSaturationProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxSaturationProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinValueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxValueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ColorSpectrumShapeProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ColorSpectrumComponentsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_PrimaryCommands(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SecondaryCommands(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IDropDownButton>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeer>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IFontIconSource>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Glyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Glyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontSize(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_FontSize(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontFamily(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_FontFamily(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_FontStyle(Windows::UI::Text::FontStyle value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsTextScaleFactorEnabled(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsTextScaleFactorEnabled(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MirroredWhenRightToLeft(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MirroredWhenRightToLeft(bool value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_GlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontSizeProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontFamilyProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontWeightProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FontStyleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsTextScaleFactorEnabledProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MirroredWhenRightToLeftProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IIconSource>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Foreground(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Foreground(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ForegroundProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBar>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Items(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItem>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Title(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Title(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Items(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_TitleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ItemsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationView>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_IsPaneOpen(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsPaneOpen(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CompactModeThresholdWidth(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_CompactModeThresholdWidth(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandedModeThresholdWidth(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ExpandedModeThresholdWidth(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneFooter(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PaneFooter(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Header(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Header(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HeaderTemplate(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HeaderTemplate(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsSettingsVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsSettingsVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsPaneToggleButtonVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsPaneToggleButtonVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AlwaysShowHeader(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AlwaysShowHeader(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CompactPaneLength(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_CompactPaneLength(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OpenPaneLength(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_OpenPaneLength(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneToggleButtonStyle(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PaneToggleButtonStyle(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectedItem(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_SelectedItem(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItems(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemsSource(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MenuItemsSource(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SettingsItem(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AutoSuggestBox(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AutoSuggestBox(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemTemplate(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MenuItemTemplate(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemTemplateSelector(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MenuItemTemplateSelector(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemContainerStyle(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MenuItemContainerStyle(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemContainerStyleSelector(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MenuItemContainerStyleSelector(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL MenuItemFromContainer(void* container, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL ContainerFromMenuItem(void* item, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL add_SelectionChanged(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_SelectionChanged(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_ItemInvoked(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_ItemInvoked(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_DisplayModeChanged(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_DisplayModeChanged(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsBackButtonVisible(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsBackButtonVisible(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsBackEnabled(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsBackEnabled(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneTitle(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PaneTitle(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL add_BackRequested(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_BackRequested(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_PaneClosed(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_PaneClosed(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_PaneClosing(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_PaneClosing(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_PaneOpened(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_PaneOpened(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_PaneOpening(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_PaneOpening(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneDisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PaneDisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneHeader(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PaneHeader(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneCustomContent(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PaneCustomContent(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ContentOverlay(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ContentOverlay(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsPaneVisible(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsPaneVisible(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectionFollowsFocus(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_SelectionFollowsFocus(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TemplateSettings(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ShoulderNavigationEnabled(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ShoulderNavigationEnabled(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OverflowLabelMode(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_OverflowLabelMode(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_DisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItem>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Icon(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Icon(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CompactPaneLength(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectsOnInvoked(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_SelectsOnInvoked(bool value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_InvokedItem(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsSettingsInvoked(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_InvokedItemContainer(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_RecommendedNavigationTransitionInfo(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_IconProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CompactPaneLengthProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectsOnInvokedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewList>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewListFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Cancel(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Cancel(bool value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_SelectedItem(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsSettingsSelected(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectedItemContainer(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_RecommendedNavigationTransitionInfo(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_IsPaneOpenProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CompactModeThresholdWidthProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandedModeThresholdWidthProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneFooterProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HeaderProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HeaderTemplateProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DisplayModeProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsSettingsVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsPaneToggleButtonVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AlwaysShowHeaderProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CompactPaneLengthProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OpenPaneLengthProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneToggleButtonStyleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemsSourceProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectedItemProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SettingsItemProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AutoSuggestBoxProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemTemplateProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemTemplateSelectorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemContainerStyleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MenuItemContainerStyleSelectorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsBackButtonVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsBackEnabledProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneTitleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneDisplayModeProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneHeaderProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneCustomContentProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ContentOverlayProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsPaneVisibleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectionFollowsFocusProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TemplateSettingsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ShoulderNavigationEnabledProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OverflowLabelModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_TopPadding(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OverflowButtonVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneToggleButtonVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BackButtonVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TopPaneVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_LeftPaneVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SingleSelectionFollowsFocus(bool* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_TopPaddingProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OverflowButtonVisibilityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PaneToggleButtonVisibilityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BackButtonVisibilityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TopPaneVisibilityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_LeftPaneVisibilityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SingleSelectionFollowsFocusProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IParallaxView>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Child(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Child(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalShift(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HorizontalShift(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalSourceEndOffset(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HorizontalSourceEndOffset(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HorizontalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalSourceStartOffset(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HorizontalSourceStartOffset(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsHorizontalShiftClamped(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsHorizontalShiftClamped(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsVerticalShiftClamped(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsVerticalShiftClamped(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxHorizontalShiftRatio(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxHorizontalShiftRatio(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxVerticalShiftRatio(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxVerticalShiftRatio(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Source(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Source(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalShift(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_VerticalShift(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalSourceEndOffset(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_VerticalSourceEndOffset(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_VerticalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalSourceStartOffset(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_VerticalSourceStartOffset(double value) noexcept = 0;
    virtual int32_t WINRT_CALL RefreshAutomaticHorizontalOffsets() noexcept = 0;
    virtual int32_t WINRT_CALL RefreshAutomaticVerticalOffsets() noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ChildProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalSourceEndOffsetProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalSourceOffsetKindProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalSourceStartOffsetProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxHorizontalShiftRatioProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HorizontalShiftProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsHorizontalShiftClampedProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsVerticalShiftClampedProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SourceProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalSourceEndOffsetProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalSourceOffsetKindProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalSourceStartOffsetProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxVerticalShiftRatioProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VerticalShiftProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IPathIconSource>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Data(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Data(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_DataProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IPersonPicture>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_BadgeNumber(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_BadgeNumber(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BadgeGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_BadgeGlyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BadgeImageSource(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_BadgeImageSource(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BadgeText(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_BadgeText(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsGroup(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsGroup(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Contact(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Contact(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DisplayName(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_DisplayName(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Initials(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Initials(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PreferSmallImage(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PreferSmallImage(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ProfilePicture(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ProfilePicture(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_BadgeNumberProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BadgeGlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BadgeImageSourceProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BadgeTextProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsGroupProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ContactProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DisplayNameProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_InitialsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PreferSmallImageProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ProfilePictureProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingControl>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Caption(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Caption(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_InitialSetValue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_InitialSetValue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsClearEnabled(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsClearEnabled(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsReadOnly(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsReadOnly(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxRating(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxRating(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PlaceholderValue(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PlaceholderValue(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemInfo(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemInfo(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Value(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Value(double value) noexcept = 0;
    virtual int32_t WINRT_CALL add_ValueChanged(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_ValueChanged(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_CaptionProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_InitialSetValueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsClearEnabledProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsReadOnlyProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxRatingProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PlaceholderValueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemInfoProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ValueProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_DisabledGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_DisabledGlyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Glyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Glyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PointerOverGlyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverPlaceholderGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PointerOverPlaceholderGlyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PlaceholderGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PlaceholderGlyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_UnsetGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_UnsetGlyph(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_DisabledGlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_GlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PlaceholderGlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverGlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverPlaceholderGlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_UnsetGlyphProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_DisabledImage(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_DisabledImage(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Image(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Image(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PlaceholderImage(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PlaceholderImage(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverImage(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PointerOverImage(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverPlaceholderImage(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PointerOverPlaceholderImage(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_UnsetImage(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_UnsetImage(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_DisabledImageProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ImageProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PlaceholderImageProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverImageProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PointerOverPlaceholderImageProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_UnsetImageProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshContainer>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Visualizer(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Visualizer(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PullDirection(Microsoft::UI::Xaml::Controls::RefreshPullDirection* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_PullDirection(Microsoft::UI::Xaml::Controls::RefreshPullDirection value) noexcept = 0;
    virtual int32_t WINRT_CALL add_RefreshRequested(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_RefreshRequested(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL RequestRefresh() noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_VisualizerProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PullDirectionProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_InteractionRatio(double* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetDeferral(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_OldState(Microsoft::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_NewState(Microsoft::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL RequestRefresh() noexcept = 0;
    virtual int32_t WINRT_CALL get_Orientation(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Orientation(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Content(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Content(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_State(Microsoft::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept = 0;
    virtual int32_t WINRT_CALL add_RefreshRequested(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_RefreshRequested(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_RefreshStateChanged(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_RefreshStateChanged(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_InfoProviderProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OrientationProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ContentProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_StateProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButton>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Flyout(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Flyout(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Command(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Command(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CommandParameter(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_CommandParameter(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL add_Click(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_Click(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeer>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_FlyoutProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CommandProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CommandParameterProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeControl>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_LeftItems(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_LeftItems(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_RightItems(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_RightItems(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TopItems(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_TopItems(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BottomItems(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_BottomItems(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL Close() noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_LeftItemsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_RightItemsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TopItemsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BottomItemsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItem>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Text(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Text(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IconSource(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IconSource(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Background(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Background(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Foreground(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Foreground(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Command(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Command(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CommandParameter(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_CommandParameter(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BehaviorOnInvoked(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_BehaviorOnInvoked(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked value) noexcept = 0;
    virtual int32_t WINRT_CALL add_Invoked(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_Invoked(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_SwipeControl(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_IconSourceProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TextProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BackgroundProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ForegroundProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CommandProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CommandParameterProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BehaviorOnInvokedProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItems>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Mode(Microsoft::UI::Xaml::Controls::SwipeMode* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Mode(Microsoft::UI::Xaml::Controls::SwipeMode value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ModeProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Symbol(Windows::UI::Xaml::Controls::Symbol* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Symbol(Windows::UI::Xaml::Controls::Symbol value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_SymbolProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_IsChecked(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsChecked(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL add_IsCheckedChanged(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_IsCheckedChanged(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeView>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_RootNodes(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectionMode(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_SelectionMode(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SelectedNodes(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL Expand(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL Collapse(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL SelectAll() noexcept = 0;
    virtual int32_t WINRT_CALL add_ItemInvoked(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_ItemInvoked(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_Expanding(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_Expanding(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_Collapsed(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_Collapsed(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL NodeFromContainer(void* container, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL ContainerFromNode(void* node, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL ItemFromContainer(void* container, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL ContainerFromItem(void* item, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL get_CanDragItems(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_CanDragItems(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CanReorderItems(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_CanReorderItems(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemTemplate(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemTemplate(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemTemplateSelector(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemTemplateSelector(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemContainerStyle(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemContainerStyle(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemContainerStyleSelector(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemContainerStyleSelector(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemContainerTransitions(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemContainerTransitions(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemsSource(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemsSource(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL add_DragItemsStarting(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_DragItemsStarting(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_DragItemsCompleted(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_DragItemsCompleted(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Node(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Item(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_DropResult(Windows::ApplicationModel::DataTransfer::DataPackageOperation* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Items(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Cancel(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Cancel(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Data(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Items(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Node(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Item(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItem>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_GlyphOpacity(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_GlyphOpacity(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_GlyphBrush(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_GlyphBrush(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandedGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ExpandedGlyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CollapsedGlyph(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_CollapsedGlyph(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_GlyphSize(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_GlyphSize(double value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsExpanded(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsExpanded(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TreeViewItemTemplateSettings(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HasUnrealizedChildren(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HasUnrealizedChildren(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemsSource(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ItemsSource(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_InvokedItem(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Handled(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Handled(bool* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_GlyphOpacityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_GlyphBrushProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandedGlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CollapsedGlyphProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_GlyphSizeProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsExpandedProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_TreeViewItemTemplateSettingsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HasUnrealizedChildrenProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemsSourceProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ExpandedGlyphVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CollapsedGlyphVisibility(Windows::UI::Xaml::Visibility* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Indentation(struct struct_Windows_UI_Xaml_Thickness* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DragItemsCount(int32_t* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ExpandedGlyphVisibilityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CollapsedGlyphVisibilityProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IndentationProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DragItemsCountProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewList>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewNode>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Content(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Content(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Parent(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsExpanded(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_IsExpanded(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HasChildren(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Depth(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HasUnrealizedChildren(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HasUnrealizedChildren(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Children(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ContentProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DepthProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsExpandedProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HasChildrenProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_SelectionModeProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CanDragItemsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CanReorderItemsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemTemplateProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemTemplateSelectorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemContainerStyleProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemContainerStyleSelectorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemContainerTransitionsProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ItemsSourceProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL EnsureRevealLights(void* element) noexcept = 0;
};};

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource
{
    Windows::Foundation::Uri UriSource() const;
    void UriSource(Windows::Foundation::Uri const& value) const;
    bool ShowAsMonochrome() const;
    void ShowAsMonochrome(bool value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IBitmapIconSource> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceFactory
{
    Microsoft::UI::Xaml::Controls::BitmapIconSource CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty UriSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty ShowAsMonochromeProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs
{
    Windows::UI::Color OldColor() const;
    Windows::UI::Color NewColor() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IColorPicker
{
    Windows::UI::Color Color() const;
    void Color(Windows::UI::Color const& value) const;
    Windows::Foundation::IReference<Windows::UI::Color> PreviousColor() const;
    void PreviousColor(optional<Windows::UI::Color> const& value) const;
    bool IsAlphaEnabled() const;
    void IsAlphaEnabled(bool value) const;
    bool IsColorSpectrumVisible() const;
    void IsColorSpectrumVisible(bool value) const;
    bool IsColorPreviewVisible() const;
    void IsColorPreviewVisible(bool value) const;
    bool IsColorSliderVisible() const;
    void IsColorSliderVisible(bool value) const;
    bool IsAlphaSliderVisible() const;
    void IsAlphaSliderVisible(bool value) const;
    bool IsMoreButtonVisible() const;
    void IsMoreButtonVisible(bool value) const;
    bool IsColorChannelTextInputVisible() const;
    void IsColorChannelTextInputVisible(bool value) const;
    bool IsAlphaTextInputVisible() const;
    void IsAlphaTextInputVisible(bool value) const;
    bool IsHexInputVisible() const;
    void IsHexInputVisible(bool value) const;
    int32_t MinHue() const;
    void MinHue(int32_t value) const;
    int32_t MaxHue() const;
    void MaxHue(int32_t value) const;
    int32_t MinSaturation() const;
    void MinSaturation(int32_t value) const;
    int32_t MaxSaturation() const;
    void MaxSaturation(int32_t value) const;
    int32_t MinValue() const;
    void MinValue(int32_t value) const;
    int32_t MaxValue() const;
    void MaxValue(int32_t value) const;
    Microsoft::UI::Xaml::Controls::ColorSpectrumShape ColorSpectrumShape() const;
    void ColorSpectrumShape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
    Microsoft::UI::Xaml::Controls::ColorSpectrumComponents ColorSpectrumComponents() const;
    void ColorSpectrumComponents(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
    winrt::event_token ColorChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
    using ColorChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IColorPicker, &impl::abi_t<Microsoft::UI::Xaml::Controls::IColorPicker>::remove_ColorChanged>;
    ColorChanged_revoker ColorChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
    void ColorChanged(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IColorPicker> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IColorPickerFactory
{
    Microsoft::UI::Xaml::Controls::ColorPicker CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IColorPickerFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPickerFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics
{
    Windows::UI::Xaml::DependencyProperty ColorProperty() const;
    Windows::UI::Xaml::DependencyProperty PreviousColorProperty() const;
    Windows::UI::Xaml::DependencyProperty IsAlphaEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorSpectrumVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorPreviewVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorSliderVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsAlphaSliderVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsMoreButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsColorChannelTextInputVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsAlphaTextInputVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHexInputVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty MinHueProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxHueProperty() const;
    Windows::UI::Xaml::DependencyProperty MinSaturationProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxSaturationProperty() const;
    Windows::UI::Xaml::DependencyProperty MinValueProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxValueProperty() const;
    Windows::UI::Xaml::DependencyProperty ColorSpectrumShapeProperty() const;
    Windows::UI::Xaml::DependencyProperty ColorSpectrumComponentsProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IColorPickerStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> PrimaryCommands() const;
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> SecondaryCommands() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ICommandBarFlyout> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyoutFactory
{
    Microsoft::UI::Xaml::Controls::CommandBarFlyout CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyoutFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IDropDownButton
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IDropDownButton> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButton<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IDropDownButtonAutomationPeer
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeer> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButtonAutomationPeer<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IDropDownButtonAutomationPeerFactory
{
    Microsoft::UI::Xaml::Controls::DropDownButtonAutomationPeer CreateInstance(Microsoft::UI::Xaml::Controls::DropDownButton const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IDropDownButtonAutomationPeerFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButtonAutomationPeerFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IDropDownButtonFactory
{
    Microsoft::UI::Xaml::Controls::DropDownButton CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButtonFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IFontIconSource
{
    hstring Glyph() const;
    void Glyph(param::hstring const& value) const;
    double FontSize() const;
    void FontSize(double value) const;
    Windows::UI::Xaml::Media::FontFamily FontFamily() const;
    void FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
    Windows::UI::Text::FontWeight FontWeight() const;
    void FontWeight(Windows::UI::Text::FontWeight const& value) const;
    Windows::UI::Text::FontStyle FontStyle() const;
    void FontStyle(Windows::UI::Text::FontStyle const& value) const;
    bool IsTextScaleFactorEnabled() const;
    void IsTextScaleFactorEnabled(bool value) const;
    bool MirroredWhenRightToLeft() const;
    void MirroredWhenRightToLeft(bool value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IFontIconSource> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IFontIconSourceFactory
{
    Microsoft::UI::Xaml::Controls::FontIconSource CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSourceFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty GlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
    Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
    Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsTextScaleFactorEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty MirroredWhenRightToLeftProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IIconSource
{
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IIconSource> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSource<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IIconSourceFactory
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IIconSourceFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IIconSourceStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBar
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::MenuBarItem> Items() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBar> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBar<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBarFactory
{
    Microsoft::UI::Xaml::Controls::MenuBar CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItem
{
    hstring Title() const;
    void Title(param::hstring const& value) const;
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> Items() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItem> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItem<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFactory
{
    Microsoft::UI::Xaml::Controls::MenuBarItem CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyout
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyout<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyoutFactory
{
    Microsoft::UI::Xaml::Controls::MenuBarItemFlyout CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyoutFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics
{
    Windows::UI::Xaml::DependencyProperty TitleProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemsProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IMenuBarStatics
{
    Windows::UI::Xaml::DependencyProperty ItemsProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationView
{
    bool IsPaneOpen() const;
    void IsPaneOpen(bool value) const;
    double CompactModeThresholdWidth() const;
    void CompactModeThresholdWidth(double value) const;
    double ExpandedModeThresholdWidth() const;
    void ExpandedModeThresholdWidth(double value) const;
    Windows::UI::Xaml::UIElement PaneFooter() const;
    void PaneFooter(Windows::UI::Xaml::UIElement const& value) const;
    Windows::Foundation::IInspectable Header() const;
    void Header(Windows::Foundation::IInspectable const& value) const;
    Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
    void HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode DisplayMode() const;
    bool IsSettingsVisible() const;
    void IsSettingsVisible(bool value) const;
    bool IsPaneToggleButtonVisible() const;
    void IsPaneToggleButtonVisible(bool value) const;
    bool AlwaysShowHeader() const;
    void AlwaysShowHeader(bool value) const;
    double CompactPaneLength() const;
    void CompactPaneLength(double value) const;
    double OpenPaneLength() const;
    void OpenPaneLength(double value) const;
    Windows::UI::Xaml::Style PaneToggleButtonStyle() const;
    void PaneToggleButtonStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::Foundation::IInspectable SelectedItem() const;
    void SelectedItem(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> MenuItems() const;
    Windows::Foundation::IInspectable MenuItemsSource() const;
    void MenuItemsSource(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::IInspectable SettingsItem() const;
    Windows::UI::Xaml::Controls::AutoSuggestBox AutoSuggestBox() const;
    void AutoSuggestBox(Windows::UI::Xaml::Controls::AutoSuggestBox const& value) const;
    Windows::UI::Xaml::DataTemplate MenuItemTemplate() const;
    void MenuItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::DataTemplateSelector MenuItemTemplateSelector() const;
    void MenuItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
    Windows::UI::Xaml::Style MenuItemContainerStyle() const;
    void MenuItemContainerStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Controls::StyleSelector MenuItemContainerStyleSelector() const;
    void MenuItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const;
    Windows::Foundation::IInspectable MenuItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    Windows::UI::Xaml::DependencyObject ContainerFromMenuItem(Windows::Foundation::IInspectable const& item) const;
    winrt::event_token SelectionChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
    using SelectionChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_SelectionChanged>;
    SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
    void SelectionChanged(winrt::event_token const& token) const noexcept;
    winrt::event_token ItemInvoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
    using ItemInvoked_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_ItemInvoked>;
    ItemInvoked_revoker ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
    void ItemInvoked(winrt::event_token const& token) const noexcept;
    winrt::event_token DisplayModeChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
    using DisplayModeChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_DisplayModeChanged>;
    DisplayModeChanged_revoker DisplayModeChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
    void DisplayModeChanged(winrt::event_token const& token) const noexcept;
    Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible IsBackButtonVisible() const;
    void IsBackButtonVisible(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible const& value) const;
    bool IsBackEnabled() const;
    void IsBackEnabled(bool value) const;
    hstring PaneTitle() const;
    void PaneTitle(param::hstring const& value) const;
    winrt::event_token BackRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
    using BackRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_BackRequested>;
    BackRequested_revoker BackRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
    void BackRequested(winrt::event_token const& token) const noexcept;
    winrt::event_token PaneClosed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
    using PaneClosed_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneClosed>;
    PaneClosed_revoker PaneClosed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
    void PaneClosed(winrt::event_token const& token) const noexcept;
    winrt::event_token PaneClosing(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
    using PaneClosing_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneClosing>;
    PaneClosing_revoker PaneClosing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
    void PaneClosing(winrt::event_token const& token) const noexcept;
    winrt::event_token PaneOpened(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
    using PaneOpened_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneOpened>;
    PaneOpened_revoker PaneOpened(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
    void PaneOpened(winrt::event_token const& token) const noexcept;
    winrt::event_token PaneOpening(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
    using PaneOpening_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneOpening>;
    PaneOpening_revoker PaneOpening(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
    void PaneOpening(winrt::event_token const& token) const noexcept;
    Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode PaneDisplayMode() const;
    void PaneDisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode const& value) const;
    Windows::UI::Xaml::UIElement PaneHeader() const;
    void PaneHeader(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::UIElement PaneCustomContent() const;
    void PaneCustomContent(Windows::UI::Xaml::UIElement const& value) const;
    Windows::UI::Xaml::UIElement ContentOverlay() const;
    void ContentOverlay(Windows::UI::Xaml::UIElement const& value) const;
    bool IsPaneVisible() const;
    void IsPaneVisible(bool value) const;
    Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus SelectionFollowsFocus() const;
    void SelectionFollowsFocus(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus const& value) const;
    Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings TemplateSettings() const;
    Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled ShoulderNavigationEnabled() const;
    void ShoulderNavigationEnabled(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled const& value) const;
    Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode OverflowLabelMode() const;
    void OverflowLabelMode(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationView> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationView<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs
{
    Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode DisplayMode() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewFactory
{
    Microsoft::UI::Xaml::Controls::NavigationView CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItem
{
    Windows::UI::Xaml::Controls::IconElement Icon() const;
    void Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
    double CompactPaneLength() const;
    bool SelectsOnInvoked() const;
    void SelectsOnInvoked(bool value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItem> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemBase> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseFactory
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemFactory
{
    Microsoft::UI::Xaml::Controls::NavigationViewItem CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeader
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeader<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeaderFactory
{
    Microsoft::UI::Xaml::Controls::NavigationViewItemHeader CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeaderFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs
{
    Windows::Foundation::IInspectable InvokedItem() const;
    bool IsSettingsInvoked() const;
    Microsoft::UI::Xaml::Controls::NavigationViewItemBase InvokedItemContainer() const;
    Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo RecommendedNavigationTransitionInfo() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparator
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparator<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparatorFactory
{
    Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparatorFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics
{
    Windows::UI::Xaml::DependencyProperty IconProperty() const;
    Windows::UI::Xaml::DependencyProperty CompactPaneLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectsOnInvokedProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewList
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewList> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewList<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewListFactory
{
    Microsoft::UI::Xaml::Controls::NavigationViewList CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewListFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewListFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs
{
    bool Cancel() const;
    void Cancel(bool value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs
{
    Windows::Foundation::IInspectable SelectedItem() const;
    bool IsSettingsSelected() const;
    Microsoft::UI::Xaml::Controls::NavigationViewItemBase SelectedItemContainer() const;
    Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo RecommendedNavigationTransitionInfo() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics
{
    Windows::UI::Xaml::DependencyProperty IsPaneOpenProperty() const;
    Windows::UI::Xaml::DependencyProperty CompactModeThresholdWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty ExpandedModeThresholdWidthProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneFooterProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayModeProperty() const;
    Windows::UI::Xaml::DependencyProperty IsSettingsVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPaneToggleButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty AlwaysShowHeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty CompactPaneLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty OpenPaneLengthProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneToggleButtonStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemsSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectedItemProperty() const;
    Windows::UI::Xaml::DependencyProperty SettingsItemProperty() const;
    Windows::UI::Xaml::DependencyProperty AutoSuggestBoxProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemTemplateSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemContainerStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty MenuItemContainerStyleSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty IsBackButtonVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty IsBackEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneTitleProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneDisplayModeProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneHeaderProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneCustomContentProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentOverlayProperty() const;
    Windows::UI::Xaml::DependencyProperty IsPaneVisibleProperty() const;
    Windows::UI::Xaml::DependencyProperty SelectionFollowsFocusProperty() const;
    Windows::UI::Xaml::DependencyProperty TemplateSettingsProperty() const;
    Windows::UI::Xaml::DependencyProperty ShoulderNavigationEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty OverflowLabelModeProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings
{
    double TopPadding() const;
    Windows::UI::Xaml::Visibility OverflowButtonVisibility() const;
    Windows::UI::Xaml::Visibility PaneToggleButtonVisibility() const;
    Windows::UI::Xaml::Visibility BackButtonVisibility() const;
    Windows::UI::Xaml::Visibility TopPaneVisibility() const;
    Windows::UI::Xaml::Visibility LeftPaneVisibility() const;
    bool SingleSelectionFollowsFocus() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory
{
    Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics
{
    Windows::UI::Xaml::DependencyProperty TopPaddingProperty() const;
    Windows::UI::Xaml::DependencyProperty OverflowButtonVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty PaneToggleButtonVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty BackButtonVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty TopPaneVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty LeftPaneVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty SingleSelectionFollowsFocusProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IParallaxView
{
    Windows::UI::Xaml::UIElement Child() const;
    void Child(Windows::UI::Xaml::UIElement const& value) const;
    double HorizontalShift() const;
    void HorizontalShift(double value) const;
    double HorizontalSourceEndOffset() const;
    void HorizontalSourceEndOffset(double value) const;
    Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind HorizontalSourceOffsetKind() const;
    void HorizontalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
    double HorizontalSourceStartOffset() const;
    void HorizontalSourceStartOffset(double value) const;
    bool IsHorizontalShiftClamped() const;
    void IsHorizontalShiftClamped(bool value) const;
    bool IsVerticalShiftClamped() const;
    void IsVerticalShiftClamped(bool value) const;
    double MaxHorizontalShiftRatio() const;
    void MaxHorizontalShiftRatio(double value) const;
    double MaxVerticalShiftRatio() const;
    void MaxVerticalShiftRatio(double value) const;
    Windows::UI::Xaml::UIElement Source() const;
    void Source(Windows::UI::Xaml::UIElement const& value) const;
    double VerticalShift() const;
    void VerticalShift(double value) const;
    double VerticalSourceEndOffset() const;
    void VerticalSourceEndOffset(double value) const;
    Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind VerticalSourceOffsetKind() const;
    void VerticalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
    double VerticalSourceStartOffset() const;
    void VerticalSourceStartOffset(double value) const;
    void RefreshAutomaticHorizontalOffsets() const;
    void RefreshAutomaticVerticalOffsets() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IParallaxView> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IParallaxViewFactory
{
    Microsoft::UI::Xaml::Controls::ParallaxView CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IParallaxViewFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxViewFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics
{
    Windows::UI::Xaml::DependencyProperty ChildProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalSourceEndOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalSourceOffsetKindProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalSourceStartOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxHorizontalShiftRatioProperty() const;
    Windows::UI::Xaml::DependencyProperty HorizontalShiftProperty() const;
    Windows::UI::Xaml::DependencyProperty IsHorizontalShiftClampedProperty() const;
    Windows::UI::Xaml::DependencyProperty IsVerticalShiftClampedProperty() const;
    Windows::UI::Xaml::DependencyProperty SourceProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSourceEndOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSourceOffsetKindProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalSourceStartOffsetProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxVerticalShiftRatioProperty() const;
    Windows::UI::Xaml::DependencyProperty VerticalShiftProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IParallaxViewStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IPathIconSource
{
    Windows::UI::Xaml::Media::Geometry Data() const;
    void Data(Windows::UI::Xaml::Media::Geometry const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IPathIconSource> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSource<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IPathIconSourceFactory
{
    Microsoft::UI::Xaml::Controls::PathIconSource CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSourceFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IPathIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty DataProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSourceStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IPersonPicture
{
    int32_t BadgeNumber() const;
    void BadgeNumber(int32_t value) const;
    hstring BadgeGlyph() const;
    void BadgeGlyph(param::hstring const& value) const;
    Windows::UI::Xaml::Media::ImageSource BadgeImageSource() const;
    void BadgeImageSource(Windows::UI::Xaml::Media::ImageSource const& value) const;
    hstring BadgeText() const;
    void BadgeText(param::hstring const& value) const;
    bool IsGroup() const;
    void IsGroup(bool value) const;
    Windows::ApplicationModel::Contacts::Contact Contact() const;
    void Contact(Windows::ApplicationModel::Contacts::Contact const& value) const;
    hstring DisplayName() const;
    void DisplayName(param::hstring const& value) const;
    hstring Initials() const;
    void Initials(param::hstring const& value) const;
    bool PreferSmallImage() const;
    void PreferSmallImage(bool value) const;
    Windows::UI::Xaml::Media::ImageSource ProfilePicture() const;
    void ProfilePicture(Windows::UI::Xaml::Media::ImageSource const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IPersonPicture> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureFactory
{
    Microsoft::UI::Xaml::Controls::PersonPicture CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IPersonPictureFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics
{
    Windows::UI::Xaml::DependencyProperty BadgeNumberProperty() const;
    Windows::UI::Xaml::DependencyProperty BadgeGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty BadgeImageSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty BadgeTextProperty() const;
    Windows::UI::Xaml::DependencyProperty IsGroupProperty() const;
    Windows::UI::Xaml::DependencyProperty ContactProperty() const;
    Windows::UI::Xaml::DependencyProperty DisplayNameProperty() const;
    Windows::UI::Xaml::DependencyProperty InitialsProperty() const;
    Windows::UI::Xaml::DependencyProperty PreferSmallImageProperty() const;
    Windows::UI::Xaml::DependencyProperty ProfilePictureProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IPersonPictureStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingControl
{
    hstring Caption() const;
    void Caption(param::hstring const& value) const;
    int32_t InitialSetValue() const;
    void InitialSetValue(int32_t value) const;
    bool IsClearEnabled() const;
    void IsClearEnabled(bool value) const;
    bool IsReadOnly() const;
    void IsReadOnly(bool value) const;
    int32_t MaxRating() const;
    void MaxRating(int32_t value) const;
    double PlaceholderValue() const;
    void PlaceholderValue(double value) const;
    Microsoft::UI::Xaml::Controls::RatingItemInfo ItemInfo() const;
    void ItemInfo(Microsoft::UI::Xaml::Controls::RatingItemInfo const& value) const;
    double Value() const;
    void Value(double value) const;
    winrt::event_token ValueChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& handler) const;
    using ValueChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRatingControl, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRatingControl>::remove_ValueChanged>;
    ValueChanged_revoker ValueChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& handler) const;
    void ValueChanged(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingControl> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingControlFactory
{
    Microsoft::UI::Xaml::Controls::RatingControl CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingControlFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControlFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics
{
    Windows::UI::Xaml::DependencyProperty CaptionProperty() const;
    Windows::UI::Xaml::DependencyProperty InitialSetValueProperty() const;
    Windows::UI::Xaml::DependencyProperty IsClearEnabledProperty() const;
    Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxRatingProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderValueProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemInfoProperty() const;
    Windows::UI::Xaml::DependencyProperty ValueProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingControlStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo
{
    hstring DisabledGlyph() const;
    void DisabledGlyph(param::hstring const& value) const;
    hstring Glyph() const;
    void Glyph(param::hstring const& value) const;
    hstring PointerOverGlyph() const;
    void PointerOverGlyph(param::hstring const& value) const;
    hstring PointerOverPlaceholderGlyph() const;
    void PointerOverPlaceholderGlyph(param::hstring const& value) const;
    hstring PlaceholderGlyph() const;
    void PlaceholderGlyph(param::hstring const& value) const;
    hstring UnsetGlyph() const;
    void UnsetGlyph(param::hstring const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoFactory
{
    Microsoft::UI::Xaml::Controls::RatingItemFontInfo CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics
{
    Windows::UI::Xaml::DependencyProperty DisabledGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty GlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverPlaceholderGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty UnsetGlyphProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo
{
    Windows::UI::Xaml::Media::ImageSource DisabledImage() const;
    void DisabledImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource Image() const;
    void Image(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource PlaceholderImage() const;
    void PlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource PointerOverImage() const;
    void PointerOverImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource PointerOverPlaceholderImage() const;
    void PointerOverPlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    Windows::UI::Xaml::Media::ImageSource UnsetImage() const;
    void UnsetImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoFactory
{
    Microsoft::UI::Xaml::Controls::RatingItemImageInfo CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics
{
    Windows::UI::Xaml::DependencyProperty DisabledImageProperty() const;
    Windows::UI::Xaml::DependencyProperty ImageProperty() const;
    Windows::UI::Xaml::DependencyProperty PlaceholderImageProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverImageProperty() const;
    Windows::UI::Xaml::DependencyProperty PointerOverPlaceholderImageProperty() const;
    Windows::UI::Xaml::DependencyProperty UnsetImageProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemInfo
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemInfo> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemInfo<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRatingItemInfoFactory
{
    Microsoft::UI::Xaml::Controls::RatingItemInfo CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemInfoFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainer
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizer Visualizer() const;
    void Visualizer(Microsoft::UI::Xaml::Controls::RefreshVisualizer const& value) const;
    Microsoft::UI::Xaml::Controls::RefreshPullDirection PullDirection() const;
    void PullDirection(Microsoft::UI::Xaml::Controls::RefreshPullDirection const& value) const;
    winrt::event_token RefreshRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
    using RefreshRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRefreshContainer, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRefreshContainer>::remove_RefreshRequested>;
    RefreshRequested_revoker RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
    void RefreshRequested(winrt::event_token const& token) const noexcept;
    void RequestRefresh() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshContainer> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainerFactory
{
    Microsoft::UI::Xaml::Controls::RefreshContainer CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainerFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics
{
    Windows::UI::Xaml::DependencyProperty VisualizerProperty() const;
    Windows::UI::Xaml::DependencyProperty PullDirectionProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs
{
    double InteractionRatio() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshRequestedEventArgs
{
    Windows::Foundation::Deferral GetDeferral() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshRequestedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizerState OldState() const;
    Microsoft::UI::Xaml::Controls::RefreshVisualizerState NewState() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer
{
    void RequestRefresh() const;
    Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation Orientation() const;
    void Orientation(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation const& value) const;
    Windows::UI::Xaml::UIElement Content() const;
    void Content(Windows::UI::Xaml::UIElement const& value) const;
    Microsoft::UI::Xaml::Controls::RefreshVisualizerState State() const;
    winrt::event_token RefreshRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
    using RefreshRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshRequested>;
    RefreshRequested_revoker RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
    void RefreshRequested(winrt::event_token const& token) const noexcept;
    winrt::event_token RefreshStateChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
    using RefreshStateChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshStateChanged>;
    RefreshStateChanged_revoker RefreshStateChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
    void RefreshStateChanged(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshVisualizer> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerFactory
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizer CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics
{
    Windows::UI::Xaml::DependencyProperty InfoProviderProperty() const;
    Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty StateProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISplitButton
{
    Windows::UI::Xaml::Controls::Primitives::FlyoutBase Flyout() const;
    void Flyout(Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
    Windows::UI::Xaml::Input::ICommand Command() const;
    void Command(Windows::UI::Xaml::Input::ICommand const& value) const;
    Windows::Foundation::IInspectable CommandParameter() const;
    void CommandParameter(Windows::Foundation::IInspectable const& value) const;
    winrt::event_token Click(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
    using Click_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ISplitButton, &impl::abi_t<Microsoft::UI::Xaml::Controls::ISplitButton>::remove_Click>;
    Click_revoker Click(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
    void Click(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButton> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonAutomationPeer
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeer> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonAutomationPeer<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonAutomationPeerFactory
{
    Microsoft::UI::Xaml::Controls::SplitButtonAutomationPeer CreateInstance(Microsoft::UI::Xaml::Controls::SplitButton const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonAutomationPeerFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonAutomationPeerFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonClickEventArgs
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonClickEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonFactory
{
    Microsoft::UI::Xaml::Controls::SplitButton CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics
{
    Windows::UI::Xaml::DependencyProperty FlyoutProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandParameterProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeControl
{
    Microsoft::UI::Xaml::Controls::SwipeItems LeftItems() const;
    void LeftItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
    Microsoft::UI::Xaml::Controls::SwipeItems RightItems() const;
    void RightItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
    Microsoft::UI::Xaml::Controls::SwipeItems TopItems() const;
    void TopItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
    Microsoft::UI::Xaml::Controls::SwipeItems BottomItems() const;
    void BottomItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
    void Close() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeControl> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeControlFactory
{
    Microsoft::UI::Xaml::Controls::SwipeControl CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeControlFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControlFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics
{
    Windows::UI::Xaml::DependencyProperty LeftItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty RightItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty TopItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty BottomItemsProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeControlStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeItem
{
    hstring Text() const;
    void Text(param::hstring const& value) const;
    Microsoft::UI::Xaml::Controls::IconSource IconSource() const;
    void IconSource(Microsoft::UI::Xaml::Controls::IconSource const& value) const;
    Windows::UI::Xaml::Media::Brush Background() const;
    void Background(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Media::Brush Foreground() const;
    void Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
    Windows::UI::Xaml::Input::ICommand Command() const;
    void Command(Windows::UI::Xaml::Input::ICommand const& value) const;
    Windows::Foundation::IInspectable CommandParameter() const;
    void CommandParameter(Windows::Foundation::IInspectable const& value) const;
    Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked BehaviorOnInvoked() const;
    void BehaviorOnInvoked(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked const& value) const;
    winrt::event_token Invoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
    using Invoked_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ISwipeItem, &impl::abi_t<Microsoft::UI::Xaml::Controls::ISwipeItem>::remove_Invoked>;
    Invoked_revoker Invoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
    void Invoked(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItem> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemFactory
{
    Microsoft::UI::Xaml::Controls::SwipeItem CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemInvokedEventArgs
{
    Microsoft::UI::Xaml::Controls::SwipeControl SwipeControl() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemInvokedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics
{
    Windows::UI::Xaml::DependencyProperty IconSourceProperty() const;
    Windows::UI::Xaml::DependencyProperty TextProperty() const;
    Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
    Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandProperty() const;
    Windows::UI::Xaml::DependencyProperty CommandParameterProperty() const;
    Windows::UI::Xaml::DependencyProperty BehaviorOnInvokedProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeItems
{
    Microsoft::UI::Xaml::Controls::SwipeMode Mode() const;
    void Mode(Microsoft::UI::Xaml::Controls::SwipeMode const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItems> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItems<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemsFactory
{
    Microsoft::UI::Xaml::Controls::SwipeItems CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemsFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemsStatics
{
    Windows::UI::Xaml::DependencyProperty ModeProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemsStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource
{
    Windows::UI::Xaml::Controls::Symbol Symbol() const;
    void Symbol(Windows::UI::Xaml::Controls::Symbol const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISymbolIconSource> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceFactory
{
    Microsoft::UI::Xaml::Controls::SymbolIconSource CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceStatics
{
    Windows::UI::Xaml::DependencyProperty SymbolProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyout
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyout<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyoutFactory
{
    Microsoft::UI::Xaml::Controls::TextCommandBarFlyout CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyoutFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton
{
    bool IsChecked() const;
    void IsChecked(bool value) const;
    winrt::event_token IsCheckedChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
    using IsCheckedChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IToggleSplitButton, &impl::abi_t<Microsoft::UI::Xaml::Controls::IToggleSplitButton>::remove_IsCheckedChanged>;
    IsCheckedChanged_revoker IsCheckedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
    void IsCheckedChanged(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButton> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonAutomationPeer
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeer> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonAutomationPeer<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonAutomationPeerFactory
{
    Microsoft::UI::Xaml::Controls::ToggleSplitButtonAutomationPeer CreateInstance(Microsoft::UI::Xaml::Controls::ToggleSplitButton const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButtonAutomationPeerFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonAutomationPeerFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonFactory
{
    Microsoft::UI::Xaml::Controls::ToggleSplitButton CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeView
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> RootNodes() const;
    Microsoft::UI::Xaml::Controls::TreeViewSelectionMode SelectionMode() const;
    void SelectionMode(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode const& value) const;
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> SelectedNodes() const;
    void Expand(Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
    void Collapse(Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
    void SelectAll() const;
    winrt::event_token ItemInvoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
    using ItemInvoked_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_ItemInvoked>;
    ItemInvoked_revoker ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
    void ItemInvoked(winrt::event_token const& token) const noexcept;
    winrt::event_token Expanding(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
    using Expanding_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_Expanding>;
    Expanding_revoker Expanding(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
    void Expanding(winrt::event_token const& token) const noexcept;
    winrt::event_token Collapsed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
    using Collapsed_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_Collapsed>;
    Collapsed_revoker Collapsed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
    void Collapsed(winrt::event_token const& token) const noexcept;
    Microsoft::UI::Xaml::Controls::TreeViewNode NodeFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    Windows::UI::Xaml::DependencyObject ContainerFromNode(Microsoft::UI::Xaml::Controls::TreeViewNode const& node) const;
    Windows::Foundation::IInspectable ItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
    Windows::UI::Xaml::DependencyObject ContainerFromItem(Windows::Foundation::IInspectable const& item) const;
    bool CanDragItems() const;
    void CanDragItems(bool value) const;
    bool CanReorderItems() const;
    void CanReorderItems(bool value) const;
    Windows::UI::Xaml::DataTemplate ItemTemplate() const;
    void ItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    Windows::UI::Xaml::Controls::DataTemplateSelector ItemTemplateSelector() const;
    void ItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
    Windows::UI::Xaml::Style ItemContainerStyle() const;
    void ItemContainerStyle(Windows::UI::Xaml::Style const& value) const;
    Windows::UI::Xaml::Controls::StyleSelector ItemContainerStyleSelector() const;
    void ItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const;
    Windows::UI::Xaml::Media::Animation::TransitionCollection ItemContainerTransitions() const;
    void ItemContainerTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    Windows::Foundation::IInspectable ItemsSource() const;
    void ItemsSource(Windows::Foundation::IInspectable const& value) const;
    winrt::event_token DragItemsStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
    using DragItemsStarting_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_DragItemsStarting>;
    DragItemsStarting_revoker DragItemsStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
    void DragItemsStarting(winrt::event_token const& token) const noexcept;
    winrt::event_token DragItemsCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
    using DragItemsCompleted_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_DragItemsCompleted>;
    DragItemsCompleted_revoker DragItemsCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
    void DragItemsCompleted(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeView> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeView<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs
{
    Microsoft::UI::Xaml::Controls::TreeViewNode Node() const;
    Windows::Foundation::IInspectable Item() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs
{
    Windows::ApplicationModel::DataTransfer::DataPackageOperation DropResult() const;
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> Items() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs
{
    bool Cancel() const;
    void Cancel(bool value) const;
    Windows::ApplicationModel::DataTransfer::DataPackage Data() const;
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> Items() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs
{
    Microsoft::UI::Xaml::Controls::TreeViewNode Node() const;
    Windows::Foundation::IInspectable Item() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewFactory
{
    Microsoft::UI::Xaml::Controls::TreeView CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItem
{
    double GlyphOpacity() const;
    void GlyphOpacity(double value) const;
    Windows::UI::Xaml::Media::Brush GlyphBrush() const;
    void GlyphBrush(Windows::UI::Xaml::Media::Brush const& value) const;
    hstring ExpandedGlyph() const;
    void ExpandedGlyph(param::hstring const& value) const;
    hstring CollapsedGlyph() const;
    void CollapsedGlyph(param::hstring const& value) const;
    double GlyphSize() const;
    void GlyphSize(double value) const;
    bool IsExpanded() const;
    void IsExpanded(bool value) const;
    Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings TreeViewItemTemplateSettings() const;
    bool HasUnrealizedChildren() const;
    void HasUnrealizedChildren(bool value) const;
    Windows::Foundation::IInspectable ItemsSource() const;
    void ItemsSource(Windows::Foundation::IInspectable const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItem> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemFactory
{
    Microsoft::UI::Xaml::Controls::TreeViewItem CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs
{
    Windows::Foundation::IInspectable InvokedItem() const;
    void Handled(bool value) const;
    bool Handled() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics
{
    Windows::UI::Xaml::DependencyProperty GlyphOpacityProperty() const;
    Windows::UI::Xaml::DependencyProperty GlyphBrushProperty() const;
    Windows::UI::Xaml::DependencyProperty ExpandedGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty CollapsedGlyphProperty() const;
    Windows::UI::Xaml::DependencyProperty GlyphSizeProperty() const;
    Windows::UI::Xaml::DependencyProperty IsExpandedProperty() const;
    Windows::UI::Xaml::DependencyProperty TreeViewItemTemplateSettingsProperty() const;
    Windows::UI::Xaml::DependencyProperty HasUnrealizedChildrenProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemsSourceProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings
{
    Windows::UI::Xaml::Visibility ExpandedGlyphVisibility() const;
    Windows::UI::Xaml::Visibility CollapsedGlyphVisibility() const;
    Windows::UI::Xaml::Thickness Indentation() const;
    int32_t DragItemsCount() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory
{
    Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics
{
    Windows::UI::Xaml::DependencyProperty ExpandedGlyphVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty CollapsedGlyphVisibilityProperty() const;
    Windows::UI::Xaml::DependencyProperty IndentationProperty() const;
    Windows::UI::Xaml::DependencyProperty DragItemsCountProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewList
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewList> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewList<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewListFactory
{
    Microsoft::UI::Xaml::Controls::TreeViewList CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewListFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewListFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNode
{
    Windows::Foundation::IInspectable Content() const;
    void Content(Windows::Foundation::IInspectable const& value) const;
    Microsoft::UI::Xaml::Controls::TreeViewNode Parent() const;
    bool IsExpanded() const;
    void IsExpanded(bool value) const;
    bool HasChildren() const;
    int32_t Depth() const;
    bool HasUnrealizedChildren() const;
    void HasUnrealizedChildren(bool value) const;
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> Children() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewNode> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeFactory
{
    Microsoft::UI::Xaml::Controls::TreeViewNode CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics
{
    Windows::UI::Xaml::DependencyProperty ContentProperty() const;
    Windows::UI::Xaml::DependencyProperty DepthProperty() const;
    Windows::UI::Xaml::DependencyProperty IsExpandedProperty() const;
    Windows::UI::Xaml::DependencyProperty HasChildrenProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics
{
    Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
    Windows::UI::Xaml::DependencyProperty CanDragItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty CanReorderItemsProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemTemplateProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemTemplateSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemContainerStyleProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemContainerStyleSelectorProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemContainerTransitionsProperty() const;
    Windows::UI::Xaml::DependencyProperty ItemsSourceProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IXamlControlsResources
{
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IXamlControlsResources> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IXamlControlsResources<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_IXamlControlsResourcesStatics
{
    void EnsureRevealLights(Windows::UI::Xaml::UIElement const& element) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IXamlControlsResourcesStatics<D>; };

}
