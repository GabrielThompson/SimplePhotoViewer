// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

WINRT_EXPORT namespace winrt::Windows::Storage {

struct StorageFile;

}

WINRT_EXPORT namespace winrt::Windows::Storage::FileProperties {

struct ImageProperties;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Data {

struct PropertyChangedEventHandler;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop {

struct TypeName;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup {

struct IXamlType;
struct XmlnsDefinition;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup {

struct IXamlMetadataProvider;

}

WINRT_EXPORT namespace winrt::SimplePhotoViewer {

struct IImageSku;
struct IImageSkuFactory;
struct IMainPage;
struct ImageSku;
struct MainPage;
struct XamlMetaDataProvider;

}

namespace winrt::impl {

template <> struct category<SimplePhotoViewer::IImageSku>{ using type = interface_category; };
template <> struct category<SimplePhotoViewer::IImageSkuFactory>{ using type = interface_category; };
template <> struct category<SimplePhotoViewer::IMainPage>{ using type = interface_category; };
template <> struct category<SimplePhotoViewer::ImageSku>{ using type = class_category; };
template <> struct category<SimplePhotoViewer::MainPage>{ using type = class_category; };
template <> struct category<SimplePhotoViewer::XamlMetaDataProvider>{ using type = class_category; };
template <> struct name<SimplePhotoViewer::IImageSku>{ static constexpr auto & value{ L"SimplePhotoViewer.IImageSku" }; };
template <> struct name<SimplePhotoViewer::IImageSkuFactory>{ static constexpr auto & value{ L"SimplePhotoViewer.IImageSkuFactory" }; };
template <> struct name<SimplePhotoViewer::IMainPage>{ static constexpr auto & value{ L"SimplePhotoViewer.IMainPage" }; };
template <> struct name<SimplePhotoViewer::ImageSku>{ static constexpr auto & value{ L"SimplePhotoViewer.ImageSku" }; };
template <> struct name<SimplePhotoViewer::MainPage>{ static constexpr auto & value{ L"SimplePhotoViewer.MainPage" }; };
template <> struct name<SimplePhotoViewer::XamlMetaDataProvider>{ static constexpr auto & value{ L"SimplePhotoViewer.XamlMetaDataProvider" }; };
template <> struct guid_storage<SimplePhotoViewer::IImageSku>{ static constexpr guid value{ 0xA1AC3519,0xBD66,0x5701,{ 0xAE,0xC8,0x2A,0x4D,0x02,0x05,0x88,0xA4 } }; };
template <> struct guid_storage<SimplePhotoViewer::IImageSkuFactory>{ static constexpr guid value{ 0x1A6B14ED,0x7B25,0x551D,{ 0xB9,0x3A,0x49,0xA3,0xCD,0xC0,0x7F,0x56 } }; };
template <> struct guid_storage<SimplePhotoViewer::IMainPage>{ static constexpr guid value{ 0x8C58E351,0xD5B2,0x5DED,{ 0xA4,0x9C,0xED,0x45,0x75,0xDD,0xFD,0xCE } }; };
template <> struct default_interface<SimplePhotoViewer::ImageSku>{ using type = SimplePhotoViewer::IImageSku; };
template <> struct default_interface<SimplePhotoViewer::MainPage>{ using type = SimplePhotoViewer::IMainPage; };
template <> struct default_interface<SimplePhotoViewer::XamlMetaDataProvider>{ using type = Windows::UI::Xaml::Markup::IXamlMetadataProvider; };

template <> struct abi<SimplePhotoViewer::IImageSku>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ImageFile(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ImageProperties(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ImageName(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ImageFileType(void** value) noexcept = 0;
};};

template <> struct abi<SimplePhotoViewer::IImageSkuFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* imageProps, void* imageFile, void* name, void* type, void** value) noexcept = 0;
};};

template <> struct abi<SimplePhotoViewer::IMainPage>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ImageSkus(void** value) noexcept = 0;
};};

template <typename D>
struct consume_SimplePhotoViewer_IImageSku
{
    Windows::Storage::StorageFile ImageFile() const;
    Windows::Storage::FileProperties::ImageProperties ImageProperties() const;
    hstring ImageName() const;
    hstring ImageFileType() const;
};
template <> struct consume<SimplePhotoViewer::IImageSku> { template <typename D> using type = consume_SimplePhotoViewer_IImageSku<D>; };

template <typename D>
struct consume_SimplePhotoViewer_IImageSkuFactory
{
    SimplePhotoViewer::ImageSku CreateInstance(Windows::Storage::FileProperties::ImageProperties const& imageProps, Windows::Storage::StorageFile const& imageFile, param::hstring const& name, param::hstring const& type) const;
};
template <> struct consume<SimplePhotoViewer::IImageSkuFactory> { template <typename D> using type = consume_SimplePhotoViewer_IImageSkuFactory<D>; };

template <typename D>
struct consume_SimplePhotoViewer_IMainPage
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> ImageSkus() const;
};
template <> struct consume<SimplePhotoViewer::IMainPage> { template <typename D> using type = consume_SimplePhotoViewer_IMainPage<D>; };

}
