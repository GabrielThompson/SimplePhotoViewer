// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls {

enum class ColorPickerHsvChannel;
enum class ColorSpectrumComponents;
enum class ColorSpectrumShape;
struct ColorChangedEventArgs;

}

WINRT_EXPORT namespace winrt::Windows::UI {

struct Color;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml {

struct DependencyProperty;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls {

struct IconElement;

}

WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls::Primitives {

struct IColorPickerSlider;
struct IColorPickerSliderFactory;
struct IColorPickerSliderStatics;
struct IColorSpectrum;
struct IColorSpectrumFactory;
struct IColorSpectrumStatics;
struct ICommandBarFlyoutCommandBar;
struct ICommandBarFlyoutCommandBarFactory;
struct ICommandBarFlyoutCommandBarTemplateSettings;
struct INavigationViewItemPresenter;
struct INavigationViewItemPresenterFactory;
struct INavigationViewItemPresenterStatics;
struct ColorPickerSlider;
struct ColorSpectrum;
struct CommandBarFlyoutCommandBar;
struct CommandBarFlyoutCommandBarTemplateSettings;
struct NavigationViewItemPresenter;

}

namespace winrt::impl {

template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ using type = interface_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>{ using type = class_category; };
template <> struct category<Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>{ using type = class_category; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSlider" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrum" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterFactory" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings" }; };
template <> struct name<Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>{ static constexpr auto & value{ L"Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter" }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ static constexpr guid value{ 0x456231BB,0x5A4C,0x564B,{ 0x9B,0x3D,0x2F,0x15,0x70,0x61,0xA0,0xF8 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ static constexpr guid value{ 0xD0CB1F0E,0x0771,0x5C7D,{ 0xBA,0x14,0xAA,0x43,0x11,0x79,0xB2,0xAC } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ static constexpr guid value{ 0x9792B197,0xC864,0x59F3,{ 0x9F,0xA0,0xE2,0x1C,0x7F,0xD4,0x6B,0x79 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ static constexpr guid value{ 0x75305916,0x882D,0x5667,{ 0xBF,0xD0,0x0A,0xF7,0x2D,0x50,0x2D,0x72 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ static constexpr guid value{ 0xEFECD442,0x8C2A,0x50A6,{ 0x88,0xA3,0x39,0x99,0xEA,0x01,0xF0,0x96 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ static constexpr guid value{ 0xAA1D251D,0x9E7B,0x5767,{ 0xAD,0xB9,0xFC,0xD3,0x68,0x55,0xD8,0x2E } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ static constexpr guid value{ 0x0F7120C5,0x6D00,0x5489,{ 0x91,0x71,0xBE,0xDD,0x2D,0x4E,0xF6,0x77 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ static constexpr guid value{ 0x58DBCDA9,0x38E4,0x5EFC,{ 0xB7,0x40,0x26,0xFD,0xA3,0xD0,0xA3,0xC6 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ static constexpr guid value{ 0x533CC5CA,0xDCF7,0x5F9D,{ 0xA4,0x60,0x93,0x4A,0x88,0x3A,0xCD,0xC1 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ static constexpr guid value{ 0x6C43C315,0xDE90,0x520E,{ 0x90,0x6B,0x83,0x17,0xB7,0x56,0x4B,0x97 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ static constexpr guid value{ 0xB28B0160,0x022C,0x593C,{ 0xAB,0x9A,0x7B,0x3D,0xED,0x2C,0x07,0x54 } }; };
template <> struct guid_storage<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ static constexpr guid value{ 0x48265FC1,0x761E,0x5F41,{ 0x81,0x66,0xFA,0x51,0x73,0x3A,0x45,0xEF } }; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>{ using type = Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>{ using type = Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>{ using type = Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings; };
template <> struct default_interface<Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>{ using type = Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter; };

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ColorChannel(Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ColorChannel(Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ColorChannelProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HsvColor(Windows::Foundation::Numerics::float4* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_HsvColor(Windows::Foundation::Numerics::float4 value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinHue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MinHue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxHue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxHue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinSaturation(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MinSaturation(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxSaturation(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxSaturation(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinValue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MinValue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxValue(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxValue(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Shape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Shape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Components(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Components(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents value) noexcept = 0;
    virtual int32_t WINRT_CALL add_ColorChanged(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_ColorChanged(winrt::event_token token) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ColorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HsvColorProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinHueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxHueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinSaturationProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxSaturationProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MinValueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxValueProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ShapeProperty(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ComponentsProperty(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_FlyoutTemplateSettings(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_OpenAnimationStartPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OpenAnimationEndPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CloseAnimationEndPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_CurrentWidth(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandedWidth(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_WidthExpansionDelta(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_WidthExpansionAnimationStartPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_WidthExpansionAnimationEndPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_WidthExpansionMoreButtonAnimationStartPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_WidthExpansionMoreButtonAnimationEndPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandUpOverflowVerticalPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandDownOverflowVerticalPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandUpAnimationStartPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandUpAnimationEndPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandUpAnimationHoldPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandDownAnimationStartPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandDownAnimationEndPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExpandDownAnimationHoldPosition(double* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ContentClipRect(Windows::Foundation::Rect* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OverflowContentClipRect(Windows::Foundation::Rect* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Icon(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Icon(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_IconProperty(void** value) noexcept = 0;
};};

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider
{
    Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel ColorChannel() const;
    void ColorChannel(Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory
{
    Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics
{
    Windows::UI::Xaml::DependencyProperty ColorChannelProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum
{
    Windows::UI::Color Color() const;
    void Color(Windows::UI::Color const& value) const;
    Windows::Foundation::Numerics::float4 HsvColor() const;
    void HsvColor(Windows::Foundation::Numerics::float4 const& value) const;
    int32_t MinHue() const;
    void MinHue(int32_t value) const;
    int32_t MaxHue() const;
    void MaxHue(int32_t value) const;
    int32_t MinSaturation() const;
    void MinSaturation(int32_t value) const;
    int32_t MaxSaturation() const;
    void MaxSaturation(int32_t value) const;
    int32_t MinValue() const;
    void MinValue(int32_t value) const;
    int32_t MaxValue() const;
    void MaxValue(int32_t value) const;
    Microsoft::UI::Xaml::Controls::ColorSpectrumShape Shape() const;
    void Shape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
    Microsoft::UI::Xaml::Controls::ColorSpectrumComponents Components() const;
    void Components(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
    winrt::event_token ColorChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
    using ColorChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum, &impl::abi_t<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>::remove_ColorChanged>;
    ColorChanged_revoker ColorChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
    void ColorChanged(winrt::event_token const& token) const noexcept;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory
{
    Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics
{
    Windows::UI::Xaml::DependencyProperty ColorProperty() const;
    Windows::UI::Xaml::DependencyProperty HsvColorProperty() const;
    Windows::UI::Xaml::DependencyProperty MinHueProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxHueProperty() const;
    Windows::UI::Xaml::DependencyProperty MinSaturationProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxSaturationProperty() const;
    Windows::UI::Xaml::DependencyProperty MinValueProperty() const;
    Windows::UI::Xaml::DependencyProperty MaxValueProperty() const;
    Windows::UI::Xaml::DependencyProperty ShapeProperty() const;
    Windows::UI::Xaml::DependencyProperty ComponentsProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar
{
    Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings FlyoutTemplateSettings() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory
{
    Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings
{
    double OpenAnimationStartPosition() const;
    double OpenAnimationEndPosition() const;
    double CloseAnimationEndPosition() const;
    double CurrentWidth() const;
    double ExpandedWidth() const;
    double WidthExpansionDelta() const;
    double WidthExpansionAnimationStartPosition() const;
    double WidthExpansionAnimationEndPosition() const;
    double WidthExpansionMoreButtonAnimationStartPosition() const;
    double WidthExpansionMoreButtonAnimationEndPosition() const;
    double ExpandUpOverflowVerticalPosition() const;
    double ExpandDownOverflowVerticalPosition() const;
    double ExpandUpAnimationStartPosition() const;
    double ExpandUpAnimationEndPosition() const;
    double ExpandUpAnimationHoldPosition() const;
    double ExpandDownAnimationStartPosition() const;
    double ExpandDownAnimationEndPosition() const;
    double ExpandDownAnimationHoldPosition() const;
    Windows::Foundation::Rect ContentClipRect() const;
    Windows::Foundation::Rect OverflowContentClipRect() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter
{
    Windows::UI::Xaml::Controls::IconElement Icon() const;
    void Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory
{
    Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory<D>; };

template <typename D>
struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics
{
    Windows::UI::Xaml::DependencyProperty IconProperty() const;
};
template <> struct consume<Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics> { template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics<D>; };

}
