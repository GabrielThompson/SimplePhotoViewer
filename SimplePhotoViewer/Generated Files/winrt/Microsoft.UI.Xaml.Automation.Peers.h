// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.Primitives.2.h"
#include "winrt/impl/Windows.UI.Xaml.Automation.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Automation.Peers.2.h"
#include "winrt/impl/Windows.UI.Xaml.Automation.Provider.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Automation.Peers.2.h"

namespace winrt::impl {

template <typename D> Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_IColorPickerSliderAutomationPeerFactory<D>::CreateInstanceWithOwner(Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory)->CreateInstanceWithOwner(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_IColorSpectrumAutomationPeerFactory<D>::CreateInstanceWithOwner(Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory)->CreateInstanceWithOwner(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_IMenuBarAutomationPeerFactory<D>::CreateInstance(Microsoft::UI::Xaml::Controls::MenuBar const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeerFactory)->CreateInstance(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_IMenuBarItemAutomationPeerFactory<D>::CreateInstance(Microsoft::UI::Xaml::Controls::MenuBarItem const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeerFactory)->CreateInstance(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_INavigationViewItemAutomationPeerFactory<D>::CreateInstanceWithOwner(Microsoft::UI::Xaml::Controls::NavigationViewItem const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory)->CreateInstanceWithOwner(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_IPersonPictureAutomationPeerFactory<D>::CreateInstanceWithOwner(Microsoft::UI::Xaml::Controls::PersonPicture const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory)->CreateInstanceWithOwner(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_IRatingControlAutomationPeerFactory<D>::CreateInstanceWithOwner(Microsoft::UI::Xaml::Controls::RatingControl const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory)->CreateInstanceWithOwner(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_ITreeViewItemAutomationPeerFactory<D>::CreateInstanceWithOwner(Microsoft::UI::Xaml::Controls::TreeViewItem const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory)->CreateInstanceWithOwner(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer consume_Microsoft_UI_Xaml_Automation_Peers_ITreeViewListAutomationPeerFactory<D>::CreateInstanceWithOwner(Microsoft::UI::Xaml::Controls::TreeViewList const& owner, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory)->CreateInstanceWithOwner(get_abi(owner), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstanceWithOwner(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstanceWithOwner, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer), Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer>(this->shim().CreateInstanceWithOwner(*reinterpret_cast<Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstanceWithOwner(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstanceWithOwner, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer), Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer>(this->shim().CreateInstanceWithOwner(*reinterpret_cast<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer), Microsoft::UI::Xaml::Controls::MenuBar const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer>(this->shim().CreateInstance(*reinterpret_cast<Microsoft::UI::Xaml::Controls::MenuBar const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer), Microsoft::UI::Xaml::Controls::MenuBarItem const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer>(this->shim().CreateInstance(*reinterpret_cast<Microsoft::UI::Xaml::Controls::MenuBarItem const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstanceWithOwner(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstanceWithOwner, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer), Microsoft::UI::Xaml::Controls::NavigationViewItem const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer>(this->shim().CreateInstanceWithOwner(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NavigationViewItem const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstanceWithOwner(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstanceWithOwner, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer), Microsoft::UI::Xaml::Controls::PersonPicture const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer>(this->shim().CreateInstanceWithOwner(*reinterpret_cast<Microsoft::UI::Xaml::Controls::PersonPicture const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstanceWithOwner(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstanceWithOwner, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer), Microsoft::UI::Xaml::Controls::RatingControl const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer>(this->shim().CreateInstanceWithOwner(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RatingControl const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstanceWithOwner(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstanceWithOwner, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer), Microsoft::UI::Xaml::Controls::TreeViewItem const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer>(this->shim().CreateInstanceWithOwner(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TreeViewItem const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory> : produce_base<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstanceWithOwner(void* owner, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstanceWithOwner, WINRT_WRAP(Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer), Microsoft::UI::Xaml::Controls::TreeViewList const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer>(this->shim().CreateInstanceWithOwner(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TreeViewList const*>(&owner), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Automation::Peers {

inline ColorPickerSliderAutomationPeer::ColorPickerSliderAutomationPeer(Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ColorPickerSliderAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory>([&](auto&& f) { return f.CreateInstanceWithOwner(owner, baseInterface, innerInterface); });
}

inline ColorSpectrumAutomationPeer::ColorSpectrumAutomationPeer(Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ColorSpectrumAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory>([&](auto&& f) { return f.CreateInstanceWithOwner(owner, baseInterface, innerInterface); });
}

inline MenuBarAutomationPeer::MenuBarAutomationPeer(Microsoft::UI::Xaml::Controls::MenuBar const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<MenuBarAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeerFactory>([&](auto&& f) { return f.CreateInstance(owner, baseInterface, innerInterface); });
}

inline MenuBarItemAutomationPeer::MenuBarItemAutomationPeer(Microsoft::UI::Xaml::Controls::MenuBarItem const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<MenuBarItemAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeerFactory>([&](auto&& f) { return f.CreateInstance(owner, baseInterface, innerInterface); });
}

inline NavigationViewItemAutomationPeer::NavigationViewItemAutomationPeer(Microsoft::UI::Xaml::Controls::NavigationViewItem const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationViewItemAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory>([&](auto&& f) { return f.CreateInstanceWithOwner(owner, baseInterface, innerInterface); });
}

inline PersonPictureAutomationPeer::PersonPictureAutomationPeer(Microsoft::UI::Xaml::Controls::PersonPicture const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<PersonPictureAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory>([&](auto&& f) { return f.CreateInstanceWithOwner(owner, baseInterface, innerInterface); });
}

inline RatingControlAutomationPeer::RatingControlAutomationPeer(Microsoft::UI::Xaml::Controls::RatingControl const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RatingControlAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory>([&](auto&& f) { return f.CreateInstanceWithOwner(owner, baseInterface, innerInterface); });
}

inline TreeViewItemAutomationPeer::TreeViewItemAutomationPeer(Microsoft::UI::Xaml::Controls::TreeViewItem const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TreeViewItemAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory>([&](auto&& f) { return f.CreateInstanceWithOwner(owner, baseInterface, innerInterface); });
}

inline TreeViewListAutomationPeer::TreeViewListAutomationPeer(Microsoft::UI::Xaml::Controls::TreeViewList const& owner)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TreeViewListAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory>([&](auto&& f) { return f.CreateInstanceWithOwner(owner, baseInterface, innerInterface); });
}

template <typename D, typename... Interfaces>
struct ColorPickerSliderAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer, Windows::UI::Xaml::Automation::Provider::IRangeValueProvider, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer, Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer, Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = ColorPickerSliderAutomationPeer;

protected:
    ColorPickerSliderAutomationPeerT(Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory>([&](auto&& f) { f.CreateInstanceWithOwner(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ColorSpectrumAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = ColorSpectrumAutomationPeer;

protected:
    ColorSpectrumAutomationPeerT(Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory>([&](auto&& f) { f.CreateInstanceWithOwner(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct MenuBarAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = MenuBarAutomationPeer;

protected:
    MenuBarAutomationPeerT(Microsoft::UI::Xaml::Controls::MenuBar const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeerFactory>([&](auto&& f) { f.CreateInstance(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct MenuBarItemAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider, Windows::UI::Xaml::Automation::Provider::IInvokeProvider, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = MenuBarItemAutomationPeer;

protected:
    MenuBarItemAutomationPeerT(Microsoft::UI::Xaml::Controls::MenuBarItem const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeerFactory>([&](auto&& f) { f.CreateInstance(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewItemAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = NavigationViewItemAutomationPeer;

protected:
    NavigationViewItemAutomationPeerT(Microsoft::UI::Xaml::Controls::NavigationViewItem const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory>([&](auto&& f) { f.CreateInstanceWithOwner(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct PersonPictureAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = PersonPictureAutomationPeer;

protected:
    PersonPictureAutomationPeerT(Microsoft::UI::Xaml::Controls::PersonPicture const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory>([&](auto&& f) { f.CreateInstanceWithOwner(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RatingControlAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = RatingControlAutomationPeer;

protected:
    RatingControlAutomationPeerT(Microsoft::UI::Xaml::Controls::RatingControl const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory>([&](auto&& f) { f.CreateInstanceWithOwner(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TreeViewItemAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>
{
    using composable = TreeViewItemAutomationPeer;

protected:
    TreeViewItemAutomationPeerT(Microsoft::UI::Xaml::Controls::TreeViewItem const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory>([&](auto&& f) { f.CreateInstanceWithOwner(owner, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TreeViewListAutomationPeerT :
    implements<D, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides2, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeer9, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer2, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverridesT<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8T<D>, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides9T<D>, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides2T<D>
{
    using composable = TreeViewListAutomationPeer;

protected:
    TreeViewListAutomationPeerT(Microsoft::UI::Xaml::Controls::TreeViewList const& owner)
    {
        impl::call_factory<Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer, Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory>([&](auto&& f) { f.CreateInstanceWithOwner(owner, *this, this->m_inner); });
    }
};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IMenuBarItemAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::MenuBarAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::MenuBarItemAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::RatingControlAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer> {};

}
